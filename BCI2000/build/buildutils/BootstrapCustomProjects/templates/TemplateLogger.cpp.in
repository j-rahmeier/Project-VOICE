////////////////////////////////////////////////////////////////////////////////
// Authors: $author$ $date$
// Description: $name$ implementation
////////////////////////////////////////////////////////////////////////////////

#include "$name$.h"
#include "BCIEvent.h"

#if 1 // remove the code in this #if statement when you are done
// This is an example API which does nothing. It is just there to make the example
// code compile.
static void* ExampleAPIConnect() { return nullptr; }
static void ExampleAPIDisconnect(void*) {}
static void ExampleAPIRegisterCallback(void*, void (*)(int, void*), void*) {}
static void ExampleAPIUnregisterCallback(void*, void (*)(int, void*), void*) {}
#endif

// Register the extension with the framework.
Extension($name$);

// C++ does not initialize simple types such as numbers, or pointers, by default.
// Rather, they will have random values.
// Take care to initialize any member variables here, so they have predictable values
// when used for the first time.
$name$::$name$()
: mLog$sname$(false),
  m$sname$Handle(nullptr)
{
    mPreviousPos = -1;
}

$name$::~$name$()
{
    Halt();
    // If you have allocated any memory with malloc(), call free() here.
    // If you have allocated any memory with new[], call delete[] here.
    // If you have created any object using new, call delete here.
    // Either kind of deallocation will silently ignore null pointers, so all
    // you need to do is to initialize those to zero in the constructor, and
    // deallocate them here.
    ExampleAPIDisconnect(m$sname$Handle);
}

void
$name$::Publish()
{
   if (OptionalParameter("/Log$sname$") > 0)
   {
     BEGIN_PARAMETER_DEFINITIONS
       "Source:Log%20Input int /Log$sname$= 1 0 0 1 "
       " // record $sname$ to event state (boolean)",
       // add parameters according to your needs, see
       // https://www.bci2000.org/mediawiki/index.php/Technical_Reference:Parameter_Definition#Parameter_Lines
     END_PARAMETER_DEFINITIONS

     BEGIN_EVENT_DEFINITIONS
      "$sname$Pos   32 0 0 0", // this is just an example, 
       // rename or add events according to your needs:
       // https://www.bci2000.org/mediawiki/index.php/Technical_Reference:State_Definition#State_Lines
     END_EVENT_DEFINITIONS
   }
}

void
$name$::Preflight() const
{
    // The user has pressed "Set Config" and we need to sanity-check everything.
    // For example, check that all necessary parameters and states are accessible,
    // also check that the values of any parameters are sane:
    //
    // if( (float)Parameter( "Denominator" ) == 0.0f )
    //      bcierr << "Denominator cannot be zero";
    //
    // Errors issued in this way, during Preflight, still allow the user to open
    // the Config dialog box, fix bad parameters and re-try.  By contrast, errors
    // and C++ exceptions at any other stage (outside Preflight) will make the
    // system stop, such that BCI2000 will need to be relaunched entirely.

    // Note that the $name$ instance itself, and its members, are read-only during
    // this phase, due to the "const" at the end of the Preflight prototype above.
    // Any methods called by Preflight must also be "const" in the same way.

    // In this example, we have no configuration parameters other than on/off, so
    // there is nothing to do here.
}

void
$name$::Initialize()
{
    // The user has pressed "Set Config" and all Preflight checks have passed.
    // The const limitation has gone, so the $name$ instance itself can be modified.
    // If your hardware requires a connection, it is now time to connect.
    // Note that Initialize() may be called multiple times in a row, so don't open the connection
    // if it still exists.
  
    if (!m$sname$Handle)
        m$sname$Handle = ExampleAPIConnect();

    if (!m$sname$Handle)
        bcierr << "Could not connect to $sname$ hardware";

    // In this example, we have no configuration parameters other than on/off, so
    // there is nothing else do here.
}

void
$name$::StartRun()
{
    // The user has just pressed "Start" (or "Resume").
    // Initialize mPreviousPos to a value that you know will never occur:
    mPreviousPos = -1;
    // It is now time to register our callback.
    // Typically, the hardware API is a C API and knows nothing about classes,
    // but allows a user-defined pointer variable as a second argument to the callback.
    // We specify the static callback function, and a pointer to the current class instance.
    ExampleAPIRegisterCallback(m$sname$Handle, &$sname$Callback, this);
}

void
$name$::StopRun()
{
    // The Running state has been set to 0, either because the user has pressed "Suspend",
    // or because the run has reached its natural end.
    // It is now time to unregister the callback because we cannot record events any more.
    ExampleAPIUnregisterCallback(m$sname$Handle, &$sname$Callback, this);
}

void
$name$::Halt()
{
    // Stop any threads or other asynchronous activity.
    // If you registered any callback, it is likely to be called from a different thread, too,
    // so call StopRun() to be sure it's unregistered.
    StopRun();
}

void
$name$::$sname$Callback(int position, void* userData)
{
    // This is the callback function. It does nothing else than forward the call
    // to our handler function, which is a member function and cannot be specified as
    // a callback function.
    static_cast<$name$*>(userData)->On$sname$Position(position);
}

void
$name$::On$sname$Position(int position)
{
    // In the position handler function, we use bcievent to record the position into the
    // event state we registered previously.
    // It is good practice to avoid flooding the system with bcievents if no change has happened,
    // that's why we compare to the previous position here:
    if (position != mPreviousPos)
    {
        mPreviousPos = position;
        bcievent << "$sname$Pos " << position; // note the space between the name, and the value
        // https://www.bci2000.org/mediawiki/index.php/Programming_Reference:Events#Event_API
    }
}
