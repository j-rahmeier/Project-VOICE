// Import declarations for fglove library, generated by DylibTool
#include "fglove.imports.h"
#include "DylibImports.h"

extern "C" { fdGlove* ( *fdOpen)( char* pPort); }
extern "C" { int ( *fdClose)( fdGlove* pFG); }
extern "C" { int ( *fdGetGloveHand)( fdGlove* pFG); }
extern "C" { int ( *fdGetGloveType)( fdGlove* pFG); }
extern "C" { int ( *fdGetNumSensors)( fdGlove* pFG); }
extern "C" { void ( *fdGetSensorRawAll)( fdGlove* pFG, unsigned short* pData); }
extern "C" { unsigned short ( *fdGetSensorRaw) (fdGlove* pFG, int nSensor); }
extern "C" { void ( *fdSetSensorRawAll)( fdGlove* pFG, unsigned short* pData); }
extern "C" { void ( *fdSetSensorRaw)( fdGlove* pFG, int nSensor, unsigned short nRaw); }
extern "C" { void ( *fdGetSensorScaledAll)( fdGlove* pFG, float* pData); }
extern "C" { float ( *fdGetSensorScaled)( fdGlove* pFG, int nSensor); }
extern "C" { int ( *fdGetNumGestures)( fdGlove* pFG); }
extern "C" { int ( *fdGetGesture)( fdGlove* pFG); }
extern "C" { int ( *fdGetGestureA)( fdGlove* pFG); }
extern "C" { void ( *fdGetCalibrationAll)( fdGlove* pFG, unsigned short* pUpper, unsigned short* pLower); }
extern "C" { void ( *fdGetCalibration)( fdGlove* pFG, int nSensor, unsigned short* pUpper, unsigned short* pLower); }
extern "C" { void ( *fdSetCalibrationAll)( fdGlove* pFG, unsigned short* pUpper, unsigned short* pLower); }
extern "C" { void ( *fdSetCalibration)( fdGlove* pFG, int nSensor, unsigned short nUpper, unsigned short nLower); }
extern "C" { void ( *fdResetCalibration)( fdGlove* pFG, int nSensor); }
extern "C" { void ( *fdResetCalibrationAll)( fdGlove* pFG); }
extern "C" { void ( *fdGetSensorMaxAll)( fdGlove* pFG, float* pMax); }
extern "C" { float ( *fdGetSensorMax)( fdGlove* pFG, int nSensor); }
extern "C" { void ( *fdSetSensorMaxAll)( fdGlove* pFG, float* pMax); }
extern "C" { void ( *fdSetSensorMax)( fdGlove* pFG, int nSensor, float fMax); }
extern "C" { void ( *fdGetThresholdAll)( fdGlove* pFG, float* pUpper, float* pLower); }
extern "C" { void ( *fdGetThreshold)( fdGlove* pFG, int nSensor, float* pUpper, float* pLower); }
extern "C" { void ( *fdSetThresholdAll)( fdGlove* pFG, float* pUpper, float* pLower); }
extern "C" { void ( *fdSetThreshold)( fdGlove* pFG, int nSensor, float fUpper, float fLower); }
extern "C" { void ( *fdGetGloveInfo)( fdGlove* pFG, unsigned char* pData); }
extern "C" { void ( *fdGetDriverInfo)( fdGlove* pFG, unsigned char* pData); }
extern "C" { void ( *fdSetCallback)( fdGlove* pFG, void* pFunc, void* param); }
extern "C" { void ( *fdRemoveCallback)( fdGlove* pFG); }
extern "C" { int ( *fdGetPacketRate)( fdGlove* pFG); }
extern "C" { bool ( *fdNewData)( fdGlove* pFG); }
extern "C" { int ( *fdGetFWVersionMajor)( fdGlove* pFG); }
extern "C" { int ( *fdGetFWVersionMinor)( fdGlove* pFG); }
extern "C" { bool ( *fdGetAutoCalibrate)( fdGlove* pFG); }
extern "C" { bool ( *fdSetAutoCalibrate)( fdGlove* pFG, bool bAutoCalibrate); }
extern "C" { bool ( *fdSaveCalibration)( fdGlove* pFG, const char* pFileName); }
extern "C" { bool ( *fdLoadCalibration)( fdGlove* pFG, const char* pFileName); }
extern "C" { int ( *fdScanUSB)( unsigned short* aPID, int& nNumMax); }
extern "C" { bool ( *fdGetSerialNumber)( fdGlove* pFG, char* pData); }


static const Dylib::Import imports[] =
{
  { "fdOpen", (void**)&fdOpen, Dylib::Import::cMangled },
  { "fdClose", (void**)&fdClose, Dylib::Import::cMangled },
  { "fdGetGloveHand", (void**)&fdGetGloveHand, Dylib::Import::cMangled },
  { "fdGetGloveType", (void**)&fdGetGloveType, Dylib::Import::cMangled },
  { "fdGetNumSensors", (void**)&fdGetNumSensors, Dylib::Import::cMangled },
  { "fdGetSensorRawAll", (void**)&fdGetSensorRawAll, Dylib::Import::cMangled },
  { "fdGetSensorRaw", (void**)&fdGetSensorRaw, Dylib::Import::cMangled },
  { "fdSetSensorRawAll", (void**)&fdSetSensorRawAll, Dylib::Import::cMangled },
  { "fdSetSensorRaw", (void**)&fdSetSensorRaw, Dylib::Import::cMangled },
  { "fdGetSensorScaledAll", (void**)&fdGetSensorScaledAll, Dylib::Import::cMangled },
  { "fdGetSensorScaled", (void**)&fdGetSensorScaled, Dylib::Import::cMangled },
  { "fdGetNumGestures", (void**)&fdGetNumGestures, Dylib::Import::cMangled },
  { "fdGetGesture", (void**)&fdGetGesture, Dylib::Import::cMangled },
  { "fdGetGestureA", (void**)&fdGetGestureA, Dylib::Import::cMangled },
  { "fdGetCalibrationAll", (void**)&fdGetCalibrationAll, Dylib::Import::cMangled },
  { "fdGetCalibration", (void**)&fdGetCalibration, Dylib::Import::cMangled },
  { "fdSetCalibrationAll", (void**)&fdSetCalibrationAll, Dylib::Import::cMangled },
  { "fdSetCalibration", (void**)&fdSetCalibration, Dylib::Import::cMangled },
  { "fdResetCalibration", (void**)&fdResetCalibration, Dylib::Import::cMangled },
  { "fdResetCalibrationAll", (void**)&fdResetCalibrationAll, Dylib::Import::cMangled },
  { "fdGetSensorMaxAll", (void**)&fdGetSensorMaxAll, Dylib::Import::cMangled },
  { "fdGetSensorMax", (void**)&fdGetSensorMax, Dylib::Import::cMangled },
  { "fdSetSensorMaxAll", (void**)&fdSetSensorMaxAll, Dylib::Import::cMangled },
  { "fdSetSensorMax", (void**)&fdSetSensorMax, Dylib::Import::cMangled },
  { "fdGetThresholdAll", (void**)&fdGetThresholdAll, Dylib::Import::cMangled },
  { "fdGetThreshold", (void**)&fdGetThreshold, Dylib::Import::cMangled },
  { "fdSetThresholdAll", (void**)&fdSetThresholdAll, Dylib::Import::cMangled },
  { "fdSetThreshold", (void**)&fdSetThreshold, Dylib::Import::cMangled },
  { "fdGetGloveInfo", (void**)&fdGetGloveInfo, Dylib::Import::cMangled },
  { "fdGetDriverInfo", (void**)&fdGetDriverInfo, Dylib::Import::cMangled },
  { "fdSetCallback", (void**)&fdSetCallback, Dylib::Import::cMangled },
  { "fdRemoveCallback", (void**)&fdRemoveCallback, Dylib::Import::cMangled },
  { "fdGetPacketRate", (void**)&fdGetPacketRate, Dylib::Import::cMangled },
  { "fdNewData", (void**)&fdNewData, Dylib::Import::cMangled },
  { "fdGetFWVersionMajor", (void**)&fdGetFWVersionMajor, Dylib::Import::cMangled },
  { "fdGetFWVersionMinor", (void**)&fdGetFWVersionMinor, Dylib::Import::cMangled },
  { "fdGetAutoCalibrate", (void**)&fdGetAutoCalibrate, Dylib::Import::cMangled },
  { "fdSetAutoCalibrate", (void**)&fdSetAutoCalibrate, Dylib::Import::cMangled },
  { "fdSaveCalibration", (void**)&fdSaveCalibration, Dylib::Import::cMangled },
  { "fdLoadCalibration", (void**)&fdLoadCalibration, Dylib::Import::cMangled },
  { "fdScanUSB", (void**)&fdScanUSB, Dylib::Import::cMangled },
  { "fdGetSerialNumber", (void**)&fdGetSerialNumber, Dylib::Import::cMangled },
  { 0, 0, 0 }
};

// Here you may specify a custom error message to be displayed when the library cannot be found.
static const char* notFoundMsg = "";
// Here you may specify an URL to some local or remote help resource.
static const char* notFoundURL = "";
RegisterDylibWithAliases( fglove, "fglove", imports, notFoundMsg, notFoundURL );