// Import declarations for GDSClientAPI library, generated by DylibTool
#include "GDSClientAPI.imports.h"
#include "DylibImports.h"

extern "C"
{
    void (*GDS_Initialize)();
}
extern "C"
{
    void (*GDS_Uninitialize)();
}
extern "C"
{
    GDS_RESULT (*GDS_GetConnectedDevices)
    (GDS_ENDPOINT destinationEndpoint, GDS_ENDPOINT localEndpoint, GDS_DEVICE_CONNECTION_INFO **connectedDevices,
     size_t *connectedDevicesCount);
}
extern "C"
{
    GDS_RESULT (*GDS_FreeConnectedDevicesList)
    (GDS_DEVICE_CONNECTION_INFO **connectedDevices, size_t connectedDevicesCount);
}
extern "C"
{
    GDS_RESULT (*GDS_Connect)
    (GDS_ENDPOINT destinationEndpoint, GDS_ENDPOINT localEndpoint, char (*deviceNames)[32], size_t deviceNamesCount,
     BOOL openExclusively, GDS_HANDLE *connectionHandle, BOOL *isCreator);
}
extern "C"
{
    GDS_RESULT (*GDS_Disconnect)(GDS_HANDLE *connectionHandle);
}
extern "C"
{
    GDS_RESULT (*GDS_BecomeCreator)(GDS_HANDLE participantConnectionHandle);
}
extern "C"
{
    GDS_RESULT (*GDS_BecomeParticipant)(GDS_HANDLE creatorConnectionHandle);
}
extern "C"
{
    GDS_RESULT (*GDS_SetConfiguration)
    (GDS_HANDLE connectionHandle, GDS_CONFIGURATION_BASE *deviceConfigurations, size_t deviceConfigurationsCount);
}
extern "C"
{
    GDS_RESULT (*GDS_GetConfiguration)
    (GDS_HANDLE connectionHandle, GDS_CONFIGURATION_BASE **deviceConfigurations, size_t *deviceConfigurationsCount);
}
extern "C"
{
    GDS_RESULT (*GDS_FreeConfigurationList)
    (GDS_CONFIGURATION_BASE **deviceConfigurations, size_t deviceConfigurationsCount);
}
extern "C"
{
    GDS_RESULT (*GDS_StartAcquisition)(GDS_HANDLE connectionHandle);
}
extern "C"
{
    GDS_RESULT (*GDS_StopAcquisition)(GDS_HANDLE connectionHandle);
}
extern "C"
{
    GDS_RESULT (*GDS_StartStreaming)(GDS_HANDLE connectionHandle);
}
extern "C"
{
    GDS_RESULT (*GDS_StopStreaming)(GDS_HANDLE connectionHandle);
}
extern "C"
{
    GDS_RESULT (*GDS_GetDataInfo)
    (GDS_HANDLE connectionHandle, size_t *scanCount, size_t *channelsPerDevice, size_t *channelsPerDeviceCount,
     size_t *bufferSizeInSamples);
}
extern "C"
{
    GDS_RESULT (*GDS_GetData)
    (GDS_HANDLE connectionHandle, size_t *scanCount, float *destinationBuffer, size_t destinationBufferSizeInSamples);
}
extern "C"
{
    GDS_RESULT (*GDS_SetConfigurationChangedCallback)
    (GDS_HANDLE connectionHandle, GDS_Callback configurationChangedCallback, void *userData);
}
extern "C"
{
    GDS_RESULT (*GDS_SetDataAcquisitionStartedCallback)
    (GDS_HANDLE connectionHandle, GDS_Callback dataAcquisitionStartedCallback, void *userData);
}
extern "C"
{
    GDS_RESULT (*GDS_SetDataAcquisitionStoppedCallback)
    (GDS_HANDLE connectionHandle, GDS_Callback dataAcquisitionStoppedCallback, void *userData);
}
extern "C"
{
    GDS_RESULT (*GDS_SetDataAcquisitionErrorCallback)
    (GDS_HANDLE connectionHandle, GDS_ResultCallback dataAcquisitionErrorCallback, void *userData);
}
extern "C"
{
    GDS_RESULT (*GDS_SetDataReadyCallback)
    (GDS_HANDLE connectionHandle, GDS_Callback dataReadyCallback, size_t numberOfScans, void *userData);
}
extern "C"
{
    GDS_RESULT (*GDS_SetSessionCreatorDiedCallback)
    (GDS_HANDLE connectionHandle, GDS_Callback sessionCreatorDiedCallback, void *userData);
}
extern "C"
{
    GDS_RESULT (*GDS_SetNewSessionCreatorCallback)
    (GDS_HANDLE connectionHandle, GDS_Callback newSessionCreatorCallback, void *userData);
}
extern "C"
{
    GDS_RESULT (*GDS_SetServerDiedCallback)
    (GDS_HANDLE connectionHandle, GDS_Callback serverDiedCallback, void *userData);
}
extern "C"
{
    GDS_RESULT (*GDS_SetForcedClientShutdownCallback)
    (GDS_HANDLE connectionHandle, GDS_Callback forcedClientShutdownCallback, void *userData);
}
extern "C"
{
    GDS_RESULT (*GDS_GNAUTILUS_GetDeviceInformation)
    (GDS_HANDLE connectionHandle, char (*deviceName)[32], char (*deviceInformation)[1024]);
}
extern "C"
{
    GDS_RESULT (*GDS_GNAUTILUS_GetChannelNames)
    (GDS_HANDLE connectionHandle, char (*deviceName)[32], uint32_t *mountedModulesCount, char (*electrodeNames)[4],
     size_t *electrodeNamesCount);
}
extern "C"
{
    GDS_RESULT (*GDS_GNAUTILUS_GetAvailableChannels)
    (GDS_HANDLE connectionHandle, char (*deviceName)[32], BOOL (*availableChannels)[64]);
}
extern "C"
{
    GDS_RESULT (*GDS_GNAUTILUS_GetAvailableDigitalIOs)
    (GDS_HANDLE connectionHandle, char (*deviceName)[32],
     GDS_GNAUTILUS_DIGITAL_IO_CHANNEL (*availableDigitalIOChannels)[8]);
}
extern "C"
{
    GDS_RESULT (*GDS_GNAUTILUS_GetSupportedSamplingRates)
    (GDS_HANDLE connectionHandle, char (*deviceName)[32], uint32_t *supportedSamplingRates,
     size_t *supportedSamplingRatesCount);
}
extern "C"
{
    GDS_RESULT (*GDS_GNAUTILUS_GetSupportedSensitivities)
    (GDS_HANDLE connectionHandle, char (*deviceName)[32], double *supportedSensitivities,
     size_t *supportedSensitivitiesCount);
}
extern "C"
{
    GDS_RESULT (*GDS_GNAUTILUS_GetSupportedNetworkChannels)
    (GDS_HANDLE connectionHandle, char (*deviceName)[32], uint32_t *supportedNetworkChannels,
     size_t *supportedNetworkChannelsCount);
}
extern "C"
{
    GDS_RESULT (*GDS_GNAUTILUS_GetSupportedInputSources)
    (GDS_HANDLE connectionHandle, char (*deviceName)[32], GDS_GNAUTILUS_INPUT_SIGNAL *supportedInputSources,
     size_t *supportedInputSourcesCount);
}
extern "C"
{
    GDS_RESULT (*GDS_GNAUTILUS_SetNetworkChannel)
    (GDS_HANDLE connectionHandle, char (*deviceName)[32], uint32_t networkChannel);
}
extern "C"
{
    GDS_RESULT (*GDS_GNAUTILUS_GetNetworkChannel)
    (GDS_HANDLE connectionHandle, char (*deviceName)[32], uint32_t *networkChannel);
}
extern "C"
{
    GDS_RESULT (*GDS_GNAUTILUS_GetScaling)
    (GDS_HANDLE connectionHandle, char (*deviceName)[32], GDS_GNAUTILUS_SCALING *scaling);
}
extern "C"
{
    GDS_RESULT (*GDS_GNAUTILUS_SetScaling)
    (GDS_HANDLE connectionHandle, char (*deviceName)[32], GDS_GNAUTILUS_SCALING *scaling);
}
extern "C"
{
    GDS_RESULT (*GDS_GNAUTILUS_ResetScaling)(GDS_HANDLE connectionHandle, char (*deviceName)[32]);
}
extern "C"
{
    GDS_RESULT (*GDS_GNAUTILUS_Calibrate)
    (GDS_HANDLE connectionHandle, char (*deviceName)[32], GDS_GNAUTILUS_SCALING *scaling);
}
extern "C"
{
    GDS_RESULT (*GDS_GNAUTILUS_GetBandpassFilters)
    (GDS_HANDLE connectionHandle, char (*deviceName)[32], GDS_FILTER_INFO *bandpassFilters,
     size_t *bandpassFiltersCount);
}
extern "C"
{
    GDS_RESULT (*GDS_GNAUTILUS_GetNotchFilters)
    (GDS_HANDLE connectionHandle, char (*deviceName)[32], GDS_FILTER_INFO *notchFilters, size_t *notchFiltersCount);
}
extern "C"
{
    GDS_RESULT (*GDS_GNAUTILUS_GetImpedance)
    (GDS_HANDLE connectionHandle, char (*deviceName)[32], double (*impedances)[64]);
}
extern "C"
{
    GDS_RESULT (*GDS_GNAUTILUS_StartImpedanceMeasurement)
    (GDS_HANDLE connectionHandle, char (*deviceName)[32],
     GDS_GNAUTILUS_ImpedanceMeasurementCallback impedanceMeasurementCallback, void *userData);
}
extern "C"
{
    GDS_RESULT (*GDS_GNAUTILUS_StopImpedanceMeasurement)
    (GDS_HANDLE connectionHandle, char (*deviceName)[32], BOOL waitUntilCompleted);
}

static const Dylib::Import imports[] = {
    {"GDS_Initialize", (void **)&GDS_Initialize, Dylib::Import::cMangled},
    {"GDS_Uninitialize", (void **)&GDS_Uninitialize, Dylib::Import::cMangled},
    {"GDS_GetConnectedDevices", (void **)&GDS_GetConnectedDevices, Dylib::Import::cMangled},
    {"GDS_FreeConnectedDevicesList", (void **)&GDS_FreeConnectedDevicesList, Dylib::Import::cMangled},
    {"GDS_Connect", (void **)&GDS_Connect, Dylib::Import::cMangled},
    {"GDS_Disconnect", (void **)&GDS_Disconnect, Dylib::Import::cMangled},
    {"GDS_BecomeCreator", (void **)&GDS_BecomeCreator, Dylib::Import::cMangled},
    {"GDS_BecomeParticipant", (void **)&GDS_BecomeParticipant, Dylib::Import::cMangled},
    {"GDS_SetConfiguration", (void **)&GDS_SetConfiguration, Dylib::Import::cMangled},
    {"GDS_GetConfiguration", (void **)&GDS_GetConfiguration, Dylib::Import::cMangled},
    {"GDS_FreeConfigurationList", (void **)&GDS_FreeConfigurationList, Dylib::Import::cMangled},
    {"GDS_StartAcquisition", (void **)&GDS_StartAcquisition, Dylib::Import::cMangled},
    {"GDS_StopAcquisition", (void **)&GDS_StopAcquisition, Dylib::Import::cMangled},
    {"GDS_StartStreaming", (void **)&GDS_StartStreaming, Dylib::Import::cMangled},
    {"GDS_StopStreaming", (void **)&GDS_StopStreaming, Dylib::Import::cMangled},
    {"GDS_GetDataInfo", (void **)&GDS_GetDataInfo, Dylib::Import::cMangled},
    {"GDS_GetData", (void **)&GDS_GetData, Dylib::Import::cMangled},
    {"GDS_SetConfigurationChangedCallback", (void **)&GDS_SetConfigurationChangedCallback, Dylib::Import::cMangled},
    {"GDS_SetDataAcquisitionStartedCallback", (void **)&GDS_SetDataAcquisitionStartedCallback, Dylib::Import::cMangled},
    {"GDS_SetDataAcquisitionStoppedCallback", (void **)&GDS_SetDataAcquisitionStoppedCallback, Dylib::Import::cMangled},
    {"GDS_SetDataAcquisitionErrorCallback", (void **)&GDS_SetDataAcquisitionErrorCallback, Dylib::Import::cMangled},
    {"GDS_SetDataReadyCallback", (void **)&GDS_SetDataReadyCallback, Dylib::Import::cMangled},
    {"GDS_SetSessionCreatorDiedCallback", (void **)&GDS_SetSessionCreatorDiedCallback, Dylib::Import::cMangled},
    {"GDS_SetNewSessionCreatorCallback", (void **)&GDS_SetNewSessionCreatorCallback, Dylib::Import::cMangled},
    {"GDS_SetServerDiedCallback", (void **)&GDS_SetServerDiedCallback, Dylib::Import::cMangled},
    {"GDS_SetForcedClientShutdownCallback", (void **)&GDS_SetForcedClientShutdownCallback, Dylib::Import::cMangled},
    {"GDS_GNAUTILUS_GetDeviceInformation", (void **)&GDS_GNAUTILUS_GetDeviceInformation, Dylib::Import::cMangled},
    {"GDS_GNAUTILUS_GetChannelNames", (void **)&GDS_GNAUTILUS_GetChannelNames, Dylib::Import::cMangled},
    {"GDS_GNAUTILUS_GetAvailableChannels", (void **)&GDS_GNAUTILUS_GetAvailableChannels, Dylib::Import::cMangled},
    {"GDS_GNAUTILUS_GetAvailableDigitalIOs", (void **)&GDS_GNAUTILUS_GetAvailableDigitalIOs, Dylib::Import::cMangled},
    {"GDS_GNAUTILUS_GetSupportedSamplingRates", (void **)&GDS_GNAUTILUS_GetSupportedSamplingRates,
     Dylib::Import::cMangled},
    {"GDS_GNAUTILUS_GetSupportedSensitivities", (void **)&GDS_GNAUTILUS_GetSupportedSensitivities,
     Dylib::Import::cMangled},
    {"GDS_GNAUTILUS_GetSupportedNetworkChannels", (void **)&GDS_GNAUTILUS_GetSupportedNetworkChannels,
     Dylib::Import::cMangled},
    {"GDS_GNAUTILUS_GetSupportedInputSources", (void **)&GDS_GNAUTILUS_GetSupportedInputSources,
     Dylib::Import::cMangled},
    {"GDS_GNAUTILUS_SetNetworkChannel", (void **)&GDS_GNAUTILUS_SetNetworkChannel, Dylib::Import::cMangled},
    {"GDS_GNAUTILUS_GetNetworkChannel", (void **)&GDS_GNAUTILUS_GetNetworkChannel, Dylib::Import::cMangled},
    {"GDS_GNAUTILUS_GetScaling", (void **)&GDS_GNAUTILUS_GetScaling, Dylib::Import::cMangled},
    {"GDS_GNAUTILUS_SetScaling", (void **)&GDS_GNAUTILUS_SetScaling, Dylib::Import::cMangled},
    {"GDS_GNAUTILUS_ResetScaling", (void **)&GDS_GNAUTILUS_ResetScaling, Dylib::Import::cMangled},
    {"GDS_GNAUTILUS_Calibrate", (void **)&GDS_GNAUTILUS_Calibrate, Dylib::Import::cMangled},
    {"GDS_GNAUTILUS_GetBandpassFilters", (void **)&GDS_GNAUTILUS_GetBandpassFilters, Dylib::Import::cMangled},
    {"GDS_GNAUTILUS_GetNotchFilters", (void **)&GDS_GNAUTILUS_GetNotchFilters, Dylib::Import::cMangled},
    {"GDS_GNAUTILUS_GetImpedance", (void **)&GDS_GNAUTILUS_GetImpedance, Dylib::Import::cMangled},
    {"GDS_GNAUTILUS_StartImpedanceMeasurement", (void **)&GDS_GNAUTILUS_StartImpedanceMeasurement,
     Dylib::Import::cMangled},
    {"GDS_GNAUTILUS_StopImpedanceMeasurement", (void **)&GDS_GNAUTILUS_StopImpedanceMeasurement,
     Dylib::Import::cMangled},
    {0, 0, 0}};

// Here you may specify a custom error message to be displayed when the library cannot be found.
static const char *notFoundMsg = "";
// Here you may specify an URL to some local or remote help resource.
static const char *notFoundURL = "";
RegisterDylib(GDSServer, imports, notFoundMsg, notFoundURL);
