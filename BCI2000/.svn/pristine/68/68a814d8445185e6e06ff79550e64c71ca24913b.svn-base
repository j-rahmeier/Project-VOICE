Source:Signal%20Properties int SourceCh= 8 16 1 % // number of digitized and stored channels
Source:Signal%20Properties int SampleBlockSize= 8 32 1 % // number of samples transmitted at a time
Source:Signal%20Properties int SamplingRate= 256 256Hz 1 % // sample rate
Source:Signal%20Properties list ChannelNames= 8 Ch1 Ch2 Ch3 Ch4 Ch5 Ch6 Ch7 Ch8 // list of channel names
Source:Signal%20Properties floatlist SourceChOffset= 8 0 0 0 0 0 0 0 0 0 % % // Offset for channels in A/D units
Source:Signal%20Properties floatlist SourceChGain= 8 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.003 % % // gain for each channel (A/D units -> muV)
Storage:Data%20Location string DataDirectory= ../data ../data % % // path to top level data directory (directory)
Storage:Session string SubjectName= test Name % % // subject alias
Storage:Session string SubjectSession= 001 001 % % // three-digit session number
Storage:Session string SubjectRun= 01 00 % % // two-digit run number
Storage:Documentation string ID_System= % // BCI2000 System Code
Storage:Documentation string ID_Amp= % // BCI2000 Amp Code
Storage:Documentation string ID_Montage= % // BCI2000 Cap Montage Code
Visualize:DataIOFilter int VisualizeRoundtrip= 1 1 0 1 // visualize roundtrip time (0=no, 1=yes) (boolean)
Visualize:DataIOFilter int VisualizeSource= 1 1 0 1 // visualize raw brain signal (0=no, 1=yes) (boolean)
Visualize:DataIOFilter int VisualizeSourceDecimation= 1 1 0 % // decimation factor for raw brain signal
Visualize:DataIOFilter int VisualizeSourceTime= 2s 2 0 % // how much time in Source visualization
Source:RandomNumberADC int ModulateAmplitude= 1 0 0 1 // Modulate the amplitude with the mouse (0=no, 1=yes) (boolean)
Source:RandomNumberADC int SineChannelX= 1 0 0 % // Channel number of sinewave controlled by mouse x position
Source:RandomNumberADC int SineChannelY= 2 0 0 % // Channel number of sinewave controlled by mouse y position (0 for all)
Source:RandomNumberADC float SineFrequency= 9Hz 10Hz % % // Frequency of sine wave
Source:RandomNumberADC int SineAmplitude= 100muV 100muV % % // Amplitude of sine wave
Source:RandomNumberADC int NoiseAmplitude= 100muV 100muV % % // Amplitude of white noise (common to all channels)
Source:RandomNumberADC int DCOffset= 0 0muV % % // DC offset (common to all channels)
Source:RandomNumberADC string OffsetMultiplier= % StimulusType % % // Expression to multiply offset by
Source:RandomNumberADC int RandomSeed= 0 0 0 1 // Initialization value for random number generator (initialize from time if 0)
Source:RandomNumberADC int SignalType= 0 0 0 2 // numeric type of output signal:  0: int16, 1: float32, 2: int32 (enumeration)
Storage:BCI2000FileWriter int SavePrmFile= 0 1 0 1 // save additional parameter file (0=no, 1=yes) (boolean)
Storage:BCI2000FileWriter string StorageTime= % // time of beginning of data storage
Source:Source%20Filter int NotchFilter= 0 0 0 2 // Power line notch filter: 0: disabled, 1: at 50Hz, 2: at 60Hz (enumeration)
Source:Source%20Filter int HighPassFilter= 0 0 0 1 // Source high pass filter: 0: disabled, 1: at 0.1Hz (enumeration)
Visualize:AlignmentFilter int VisualizeAlignment= 0 0 0 1 // visualize aligned channels (0=no, 1=yes) (boolean)
Source:Online%20Processing stringlist TransmitChList= 1 * 1 1 128 // list of transmitted channels
Filtering:SpatialFilter matrix SpatialFilter= 4 4 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 % % // columns represent input channels, rows represent output channels
Filtering:SpatialFilter int SpatialFilterType= 0 // 
Visualize:SpatialFilter int VisualizeSpatialFiltering= 0 0 0 1 // visualize spatially filtered signals (0=no 1=yes) (boolean)
Filtering:ARFilter int WindowLength= 0.5s 0.5s % % // Time window for spectrum computation
Filtering:ARFilter int Detrend= 0 0 0 2 // Detrend data? 0: no, 1: mean, 2: linear (enumeration)
Filtering:ARFilter int ModelOrder= 16 16 0 % // AR model order
Filtering:ARFilter int OutputType= 0 0 0 2 // 0: Spectral Amplitude, 1: Spectral Power, 2: AR Coefficients (enumeration)
Filtering:ARFilter float FirstBinCenter= 0Hz 0Hz % % // Center of first frequency bin in Hz
Filtering:ARFilter float LastBinCenter= 30Hz 30Hz % % // Center of last frequency bin in Hz
Filtering:ARFilter float BinWidth= 3Hz 3Hz % % // Width of spectral bins in Hz
Filtering:ARFilter int EvaluationsPerBin= 15 15 1 % // Number of uniformly spaced evaluation points entering into a single bin value
Visualize:ARFilter int VisualizeTemporalFiltering= 1 0 0 1 // Visualize temporal signal features (boolean)
Filtering:LPFilter float LPTimeConstant= 0 16s 0 % // time constant for the low pass filter
Visualize:LPFilter int VisualizeLowPass= 0 1 0 1 // visualize low pass output signal (boolean)
Filtering:LinearClassifier matrix Classifier= 2 { input%20channel input%20element%20(bin) output%20channel weight } 1 4 1 1 2 4 2 1 // Linear classification matrix in sparse representation
Visualize:LinearClassifier int VisualizeClassFiltering= 0 0 0 1 // visualize Class filtered signals: 0=no, 1=yes (boolean)
Filtering:Normalizer floatlist NormalizerOffsets= 3 190 160 0 0 % % // normalizer offsets
Filtering:Normalizer floatlist NormalizerGains= 3 0.02 0.02 0 0 % % // normalizer gain values
Filtering:Normalizer intlist Adaptation= 3 2 2 0 0 0 2 // 0: no adaptation, 1: zero mean, 2: zero mean, unit variance (enumeration)
Filtering:Normalizer matrix BufferConditions= 2 2 (Feedback)&&(TargetCode==4) (Feedback)&&(TargetCode==1) (Feedback)&&(TargetCode==2) (Feedback)&&(TargetCode==3) // expressions corresponding to data buffers (columns correspond to output channels, multiple rows correspond to multiple buffers)
Filtering:Normalizer float BufferLength= 4s 9s % % // time window of past data per buffer that enters into statistic
Filtering:Normalizer string UpdateTrigger= (Feedback==0) // expression to trigger offset/gain update when changing from 0 (use empty string for continuous update)
Visualize:Normalizer int VisualizeNormalFiltering= 1 0 0 1 // visualize normalized signals (boolean)
Connector:ConnectorInput list ConnectorInputFilter= 0 // list of state names or signal elements to allow, "*" for any, signal elements as in "Signal(1,0)"
Connector:ConnectorInput string ConnectorInputAddress= % localhost:20320 % % // IP address/port to read from, e.g. localhost:20320
Application:Window int WindowWidth= 640 640 0 % // width of application window
Application:Window int WindowHeight= 480 480 0 % // height of application window
Application:Window int WindowLeft= 0 0 % % // screen coordinate of application window's left edge
Application:Window int WindowTop= 0 0 % % // screen coordinate of application window's top edge
Application:Sequencing float PreRunDuration= 2s 2s 0 % // duration of pause preceding first trial
Application:Sequencing float PreFeedbackDuration= 2s 2s 0 % // duration of target display prior to feedback
Application:Sequencing float FeedbackDuration= 2s 3s 0 % // duration of feedback
Application:Sequencing float PostFeedbackDuration= 1s 1s 0 % // duration of result display after feedback
Application:Sequencing float ITIDuration= 1s 1s 0 % // duration of inter-trial interval
Application:Sequencing float MinRunLength= 120s 120s 0 % // minimum duration of a run
Application:Sequencing int NumberOfTrials= % 0 0 % // number of trials; if blank, MinRunLength is used
Application:Targets int NumberTargets= 4 2 0 15 // number of targets
Application:Window int WindowBitDepth= 16 16 1 32 // color bit depth of feedback window
Application:Window int WindowFullScreen= 0 0 0 1 // full screen display of feedback window (boolean)
Application:Window int WindowOnSecondaryMonitor= 0 0 0 1 // display on secondary monitor when in full screen mode (boolean)
Application:Sequencing float MaxFeedbackDuration= 4s % 0 % // abort a trial after this amount of feedback time has expired
Application:3DEnvironment floatlist CameraPos= 3 50 50 150 // camera position vector in percent coordinates of 3D area
Application:3DEnvironment floatlist CameraAim= 3 50 50 50 // camera aim point in percent coordinates
Application:3DEnvironment float CameraProjection= 0 0 0 2 // projection type: 0: flat, 1: wide angle perspective, 2: narrow angle perspective (enumeration)
Application:3DEnvironment floatlist LightSourcePos= 3 50 50 150 // light source position in percent coordinates
Application:3DEnvironment int LightSourceColor= 0xffffff // light source RGB color (color)
Application:3DEnvironment int WorkspaceBoundaryColor= 0xffff00 0 % % // workspace boundary color (0xff000000 for invisible) (color)
Application:3DEnvironment string WorkspaceBoundaryTexture= images/grid.bmp // path of workspace boundary texture (inputfile)
Application:Cursor float CursorWidth= 10 10 0.0 % // feedback cursor width in percent of screen width
Application:Cursor int CursorColorFront= 0xff0000 // cursor color when it is at the front of the workspace (color)
Application:Cursor int CursorColorBack= 0xff0000 // cursor color when it is at the front of the workspace (color)
Application:Cursor floatlist CursorPos= 3 50 50 50 // cursor starting position
Application:Targets matrix Targets= 5 { pos%20x pos%20y pos%20z width%20x width%20y width%20z } 50 96 50 50 8 8 96 50 50 8 50 8 50 4 50 50 8 8 4 50 50 8 50 8 50 50 4 25 25 8 // target positions and widths in percentage coordinates
Application:Targets int TargetColor= 0xff0000 // target color (color)
Application:Targets string TargetTexture= % // path of target texture (inputfile)
Application:Targets int TestAllTargets= 0 0 0 1 // test all targets for cursor collision? 0: test only the visible current target, 1: test all targets (enumeration)
Connector:ConnectorOutput string ConnectorOutputAddress= % localhost:20320 % % // IP address/port to write to, e.g. localhost:20320
Application:Localization string Language= Default Default % % // Language for user messages
