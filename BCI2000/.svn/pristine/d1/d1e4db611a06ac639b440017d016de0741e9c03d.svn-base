// Import declarations for EyeX library, generated by DylibTool
#include "EyeX.imports.h"
#include "DylibImports.h"

extern "C" { TX_RESULT (__cdecl *txInitializeEyeX)( TX_EYEXCOMPONENTOVERRIDEFLAGS flags, const TX_LOGGINGMODEL* pLoggingModel, const TX_THREADINGMODEL* pThreadingModel, const TX_SCHEDULINGMODEL* pSchedulingModel, void* pMemoryModel); }
extern "C" { TX_RESULT (__cdecl *txUninitializeEyeX)(); }
extern "C" { TX_RESULT (__cdecl *txIsEyeXInitialized)( TX_BOOL* pInitialized); }
extern "C" { TX_RESULT (__cdecl *txWriteLogMessage)( TX_LOGLEVEL level, TX_CONSTSTRING scope, TX_CONSTSTRING message); }
extern "C" { TX_RESULT (__cdecl *txSetInvalidArgumentHandler)( TX_INVALIDARGUMENTCALLBACK handler, TX_USERPARAM userParam); }
extern "C" { TX_RESULT (__cdecl *txEnableMonoCallbacks)( TX_CONSTSTRING monoModuleName); }
extern "C" { TX_RESULT (__cdecl *txGetEyeXAvailability)( TX_EYEXAVAILABILITY* pEyeXAvailability); }
extern "C" { TX_RESULT (__cdecl *txCreateContext)( TX_CONTEXTHANDLE* phContext, TX_BOOL trackObjects); }
extern "C" { TX_RESULT (__cdecl *txReleaseContext)( TX_CONTEXTHANDLE* phContext); }
extern "C" { TX_RESULT (__cdecl *txShutdownContext)( TX_CONTEXTHANDLE hContext, TX_INTEGER cleanupTimeout, TX_BOOL logLeakingObjectsInfo); }
extern "C" { TX_RESULT (__cdecl *txSetContextName)( TX_CONTEXTHANDLE hContext, TX_CONSTSTRING name); }
extern "C" { TX_RESULT (__cdecl *txSetContextParams)( TX_CONTEXTHANDLE hContext, TX_CONSTHANDLE hParams); }
extern "C" { TX_RESULT (__cdecl *txGetContextName)( TX_CONTEXTHANDLE hContext, TX_STRING pName, TX_SIZE* pNameSize); }
extern "C" { TX_RESULT (__cdecl *txGetTrackedObjects)( TX_CONSTCONTEXTHANDLE hContext, TX_HANDLE* phObjects, TX_SIZE* pObjectsSize); }
extern "C" { TX_RESULT (__cdecl *txEnableConnection)( TX_CONTEXTHANDLE hContext); }
extern "C" { TX_RESULT (__cdecl *txDisableConnection)( TX_CONTEXTHANDLE hContext); }
extern "C" { TX_RESULT (__cdecl *txGetConnectionState)( TX_CONSTCONTEXTHANDLE hContext, TX_CONNECTIONSTATE* pConnectionState); }
extern "C" { TX_RESULT (__cdecl *txRegisterConnectionStateChangedHandler)( TX_CONTEXTHANDLE hContext, TX_TICKET* pTicket, TX_CONNECTIONSTATECHANGEDCALLBACK handler, TX_USERPARAM userParam); }
extern "C" { TX_RESULT (__cdecl *txUnregisterConnectionStateChangedHandler)( TX_CONTEXTHANDLE hContext, TX_TICKET ticket); }
extern "C" { TX_RESULT (__cdecl *txRegisterMessageHandler)( TX_CONTEXTHANDLE hContext, TX_TICKET* pTicket, TX_MESSAGETYPE messageType, TX_HANDLE hOptions, TX_ASYNCDATACALLBACK handler, TX_USERPARAM userParam); }
extern "C" { TX_RESULT (__cdecl *txUnregisterMessageHandler)( TX_CONTEXTHANDLE hContext, TX_TICKET ticket); }
extern "C" { TX_RESULT (__cdecl *txRegisterQueryHandler)( TX_CONTEXTHANDLE hContext, TX_TICKET* pTicket, TX_ASYNCDATACALLBACK handler, TX_USERPARAM userParam); }
extern "C" { TX_RESULT (__cdecl *txUnregisterQueryHandler)( TX_CONTEXTHANDLE hContext, TX_TICKET ticket); }
extern "C" { TX_RESULT (__cdecl *txRegisterEventHandler)( TX_CONTEXTHANDLE hContext, TX_TICKET* pTicket, TX_ASYNCDATACALLBACK handler, TX_USERPARAM userParam); }
extern "C" { TX_RESULT (__cdecl *txUnregisterEventHandler)( TX_CONTEXTHANDLE hContext, TX_TICKET ticket); }
extern "C" { TX_RESULT (__cdecl *txPerformScheduledJobs)( TX_CONTEXTHANDLE hContext); }
extern "C" { TX_RESULT (__cdecl *txGetContext)( TX_CONSTHANDLE hObject, TX_CONTEXTHANDLE* phContext); }
extern "C" { TX_RESULT (__cdecl *txGetObjectType)( TX_CONSTHANDLE hObject, TX_INTERACTIONOBJECTTYPE* phObjectType); }
extern "C" { TX_RESULT (__cdecl *txGetObjectTypeName)( TX_CONSTHANDLE hObject, TX_STRING pObjectTypeName, TX_SIZE* pObjectTypeNameSize); }
extern "C" { TX_RESULT (__cdecl *txReleaseObject)( TX_HANDLE* phObject); }
extern "C" { TX_RESULT (__cdecl *txFormatObjectAsText)( TX_CONSTHANDLE hObject, TX_STRING pText, TX_SIZE* pTextSize); }
extern "C" { TX_RESULT (__cdecl *txGetAsyncDataResultCode)( TX_CONSTHANDLE hAsyncData, TX_RESULT* pResult); }
extern "C" { TX_RESULT (__cdecl *txGetAsyncDataContent)( TX_CONSTHANDLE hAsyncData, TX_HANDLE* phObject); }
extern "C" { TX_RESULT (__cdecl *txCreateSnapshot)( TX_CONTEXTHANDLE hContext, TX_HANDLE* phSnapshot); }
extern "C" { TX_RESULT (__cdecl *txCreateSnapshotWithQueryBounds)( TX_CONSTHANDLE hQuery, TX_HANDLE* phSnapshot); }
extern "C" { TX_RESULT (__cdecl *txCreateSnapshotForQuery)( TX_CONSTHANDLE hQuery, TX_HANDLE* phSnapshot); }
extern "C" { TX_RESULT (__cdecl *txCommitSnapshotAsync)( TX_HANDLE hSnapshot, TX_ASYNCDATACALLBACK completionHandler, TX_USERPARAM userParam); }
extern "C" { TX_RESULT (__cdecl *txGetSnapshotBounds)( TX_CONSTHANDLE hSnapshot, TX_HANDLE* phBounds); }
extern "C" { TX_RESULT (__cdecl *txGetSnapshotWindowIdCount)( TX_CONSTHANDLE hSnapshot, TX_SIZE* pWindowIdsCount); }
extern "C" { TX_RESULT (__cdecl *txGetSnapshotWindowId)( TX_CONSTHANDLE hSnapshot, TX_INTEGER windowIdIndex, TX_STRING pWindowId, TX_SIZE* pWindowIdSize); }
extern "C" { TX_RESULT (__cdecl *txAddSnapshotWindowId)( TX_HANDLE hSnapshot, TX_CONSTSTRING windowId); }
extern "C" { TX_RESULT (__cdecl *txCreateInteractor)( TX_HANDLE hSnapshot, TX_HANDLE* phInteractor, TX_CONSTSTRING interactorId, TX_CONSTSTRING parentId, TX_CONSTSTRING windowId); }
extern "C" { TX_RESULT (__cdecl *txCreateRectangularInteractor)( TX_HANDLE hSnapshot, TX_HANDLE* phInteractor, TX_CONSTSTRING interactorId, TX_RECT* pBounds, TX_CONSTSTRING parentId, TX_CONSTSTRING windowId); }
extern "C" { TX_RESULT (__cdecl *txRemoveInteractor)( TX_HANDLE hSnapshot, TX_CONSTSTRING interactorId); }
extern "C" { TX_RESULT (__cdecl *txGetInteractors)( TX_CONSTHANDLE hSnapshot, TX_HANDLE* phInteractors, TX_SIZE* pInteractorsSize); }
extern "C" { TX_RESULT (__cdecl *txCreateSnapshotBounds)( TX_HANDLE hSnapshot, TX_HANDLE* phBounds, TX_BOUNDSTYPE boundsType); }
extern "C" { TX_RESULT (__cdecl *txDeleteSnapshotBounds)( TX_HANDLE hSnapshot); }
extern "C" { TX_RESULT (__cdecl *txCreateGlobalInteractorSnapshot)( TX_CONTEXTHANDLE hContext, TX_CONSTSTRING interactorId, TX_HANDLE* hSnapshot, TX_HANDLE* hInteractor); }
extern "C" { TX_RESULT (__cdecl *txGetBoundsType)( TX_CONSTHANDLE hBounds, TX_BOUNDSTYPE* pBoundsType); }
extern "C" { TX_RESULT (__cdecl *txSetRectangularBoundsData)( TX_HANDLE hBounds, TX_REAL x, TX_REAL y, TX_REAL width, TX_REAL height); }
extern "C" { TX_RESULT (__cdecl *txSetRectangularBoundsDataRect)( TX_HANDLE hBounds, const TX_RECT* pRect); }
extern "C" { TX_RESULT (__cdecl *txGetRectangularBoundsData)( TX_CONSTHANDLE hBounds, TX_REAL* pX, TX_REAL* pY, TX_REAL* pWidth, TX_REAL* pHeight); }
extern "C" { TX_RESULT (__cdecl *txGetRectangularBoundsDataRect)( TX_CONSTHANDLE hBounds, TX_RECT* pRect); }
extern "C" { TX_RESULT (__cdecl *txBoundsIntersect)( TX_CONSTHANDLE hBounds, TX_REAL x2, TX_REAL y2, TX_REAL width2, TX_REAL height2, TX_BOOL* pIntersects); }
extern "C" { TX_RESULT (__cdecl *txBoundsIntersectRect)( TX_CONSTHANDLE hBounds, const TX_RECT* pRect2, TX_BOOL* pIntersects); }
extern "C" { TX_RESULT (__cdecl *txGetInteractorId)( TX_CONSTHANDLE hInteractor, TX_STRING pInteractorId, TX_SIZE* pInteractorIdSize); }
extern "C" { TX_RESULT (__cdecl *txGetInteractorParentId)( TX_CONSTHANDLE hInteractor, TX_STRING pParentInteractorId, TX_SIZE* pInteractorParentIdSize); }
extern "C" { TX_RESULT (__cdecl *txGetInteractorWindowId)( TX_CONSTHANDLE hInteractor, TX_STRING pWindowId, TX_SIZE* pWindowIdSize); }
extern "C" { TX_RESULT (__cdecl *txSetInteractorZ)( TX_HANDLE hInteractor, TX_REAL z); }
extern "C" { TX_RESULT (__cdecl *txGetInteractorZ)( TX_CONSTHANDLE hInteractor, TX_REAL* pZ); }
extern "C" { TX_RESULT (__cdecl *txSetInteractorEnabled)( TX_HANDLE hInteractor, TX_BOOL enabled); }
extern "C" { TX_RESULT (__cdecl *txGetInteractorEnabled)( TX_CONSTHANDLE hInteractor, TX_BOOL* pEnabled); }
extern "C" { TX_RESULT (__cdecl *txSetInteractorDeleted)( TX_HANDLE hInteractor, TX_BOOL deleted); }
extern "C" { TX_RESULT (__cdecl *txGetInteractorDeleted)( TX_CONSTHANDLE hInteractor, TX_BOOL* pDeleted); }
extern "C" { TX_RESULT (__cdecl *txCreateInteractorBounds)( TX_HANDLE hInteractor, TX_HANDLE* phBounds, TX_BOUNDSTYPE boundsType); }
extern "C" { TX_RESULT (__cdecl *txDeleteInteractorBounds)( TX_HANDLE hInteractor); }
extern "C" { TX_RESULT (__cdecl *txGetInteractorBounds)( TX_CONSTHANDLE hInteractor, TX_HANDLE* phBounds); }
extern "C" { TX_RESULT (__cdecl *txCreateInteractorBehavior)( TX_HANDLE hInteractor, TX_HANDLE* phBehavior, TX_BEHAVIORTYPE behaviorType); }
extern "C" { TX_RESULT (__cdecl *txRemoveInteractorBehavior)( TX_HANDLE hInteractor, TX_BEHAVIORTYPE behaviorType); }
extern "C" { TX_RESULT (__cdecl *txGetInteractorBehavior)( TX_CONSTHANDLE hInteractor, TX_HANDLE* phBehavior, TX_BEHAVIORTYPE behaviorType); }
extern "C" { TX_RESULT (__cdecl *txGetInteractorBehaviors)( TX_CONSTHANDLE hInteractor, TX_HANDLE* phBehaviors, TX_SIZE* pBehaviorsSize); }
extern "C" { TX_RESULT (__cdecl *txCreateGazeAwareBehavior)( TX_HANDLE hInteractor, const TX_GAZEAWAREPARAMS* pParams); }
extern "C" { TX_RESULT (__cdecl *txCreateActivatableBehavior)( TX_HANDLE hInteractor, const TX_ACTIVATABLEPARAMS* pParams); }
extern "C" { TX_RESULT (__cdecl *txCreatePannableBehavior)( TX_HANDLE hInteractor, const TX_PANNABLEPARAMS* pParams); }
extern "C" { TX_RESULT (__cdecl *txCreateGazePointDataBehavior)( TX_HANDLE hInteractor, const TX_GAZEPOINTDATAPARAMS* pParams); }
extern "C" { TX_RESULT (__cdecl *txCreateFixationDataBehavior)( TX_HANDLE hInteractor, const TX_FIXATIONDATAPARAMS* pParams); }
extern "C" { TX_RESULT (__cdecl *txCreateMask)( TX_HANDLE hInteractor, TX_HANDLE* phMask, TX_MASKTYPE maskType, TX_INTEGER columnCount, TX_INTEGER rowCount, const TX_BYTE* pData); }
extern "C" { TX_RESULT (__cdecl *txRemoveMask)( TX_HANDLE hInteractor); }
extern "C" { TX_RESULT (__cdecl *txGetMask)( TX_CONSTHANDLE hInteractor, TX_HANDLE* phMask); }
extern "C" { TX_RESULT (__cdecl *txGetMaskData)( TX_CONSTHANDLE hMask, TX_INTEGER* pColumnCount, TX_INTEGER* pRowCount, TX_BYTE* pData, TX_SIZE* pDataSize); }
extern "C" { TX_RESULT (__cdecl *txSetMaskBounds)( TX_HANDLE hInteractor, const TX_RECT* pBounds); }
extern "C" { TX_RESULT (__cdecl *txClearMaskBounds)( TX_HANDLE hInteractor); }
extern "C" { TX_RESULT (__cdecl *txGetMaskBounds)( TX_CONSTHANDLE hInteractor, TX_RECT* pBounds); }
extern "C" { TX_RESULT (__cdecl *txCreateCommand)( TX_CONTEXTHANDLE hContext, TX_HANDLE* phCommand, TX_COMMANDTYPE commandType); }
extern "C" { TX_RESULT (__cdecl *txGetCommandType)( TX_CONSTHANDLE hCommand, TX_COMMANDTYPE* pCommandType); }
extern "C" { TX_RESULT (__cdecl *txSetCommandData)( TX_HANDLE hCommand, TX_HANDLE hObject); }
extern "C" { TX_RESULT (__cdecl *txGetCommandData)( TX_CONSTHANDLE hCommand, TX_HANDLE* phObject); }
extern "C" { TX_RESULT (__cdecl *txExecuteCommandAsync)( TX_HANDLE hCommand, TX_ASYNCDATACALLBACK completionHandler, TX_USERPARAM userParam); }
extern "C" { TX_RESULT (__cdecl *txCreateActionCommand)( TX_CONTEXTHANDLE hContext, TX_HANDLE* phCommand, TX_ACTIONTYPE actionType); }
extern "C" { TX_RESULT (__cdecl *txDisableBuiltinKeys)( TX_CONTEXTHANDLE hContext, TX_CONSTSTRING windowId, TX_ASYNCDATACALLBACK completionHandler, TX_USERPARAM userParam); }
extern "C" { TX_RESULT (__cdecl *txEnableBuiltinKeys)( TX_CONTEXTHANDLE hContext, TX_CONSTSTRING windowId, TX_ASYNCDATACALLBACK completionHandler, TX_USERPARAM userParam); }
extern "C" { TX_RESULT (__cdecl *txLaunchConfigurationTool)( TX_CONTEXTHANDLE hContext, TX_CONFIGURATIONTOOL configurationTool, TX_ASYNCDATACALLBACK completionHandler, TX_USERPARAM userParam); }
extern "C" { TX_RESULT (__cdecl *txSetCurrentProfile)( TX_CONTEXTHANDLE hContext, TX_CONSTSTRING profileName, TX_ASYNCDATACALLBACK completionHandler, TX_USERPARAM userParam); }
extern "C" { TX_RESULT (__cdecl *txDeleteProfile)( TX_CONTEXTHANDLE hContext, TX_CONSTSTRING profileName, TX_ASYNCDATACALLBACK completionHandler, TX_USERPARAM userParam); }
extern "C" { TX_RESULT (__cdecl *txGetBehaviorType)( TX_CONSTHANDLE hBehavior, TX_BEHAVIORTYPE* pBehaviorType); }
extern "C" { TX_RESULT (__cdecl *txSetActivatableBehaviorParams)( TX_HANDLE hBehavior, const TX_ACTIVATABLEPARAMS* pParams); }
extern "C" { TX_RESULT (__cdecl *txGetActivatableBehaviorParams)( TX_CONSTHANDLE hBehavior, TX_ACTIVATABLEPARAMS* pParams); }
extern "C" { TX_RESULT (__cdecl *txGetActivatableEventType)( TX_CONSTHANDLE hBehavior, TX_ACTIVATABLEEVENTTYPE* pEventType); }
extern "C" { TX_RESULT (__cdecl *txGetActivationFocusChangedEventParams)( TX_CONSTHANDLE hBehavior, TX_ACTIVATIONFOCUSCHANGEDEVENTPARAMS* pEventParams); }
extern "C" { TX_RESULT (__cdecl *txSetPannableBehaviorParams)( TX_HANDLE hBehavior, const TX_PANNABLEPARAMS* pParams); }
extern "C" { TX_RESULT (__cdecl *txGetPannableBehaviorParams)( TX_CONSTHANDLE hBehavior, TX_PANNABLEPARAMS* pParams); }
extern "C" { TX_RESULT (__cdecl *txGetPannableEventType)( TX_CONSTHANDLE hBehavior, TX_PANNABLEEVENTTYPE* pEventType); }
extern "C" { TX_RESULT (__cdecl *txGetPannablePanEventParams)( TX_CONSTHANDLE hBehavior, TX_PANNABLEPANEVENTPARAMS* pEventParams); }
extern "C" { TX_RESULT (__cdecl *txGetPannableStepEventParams)( TX_CONSTHANDLE hBehavior, TX_PANNABLESTEPEVENTPARAMS* pEventParams); }
extern "C" { TX_RESULT (__cdecl *txGetPannableHandsFreeEventParams)( TX_CONSTHANDLE hBehavior, TX_PANNABLEHANDSFREEEVENTPARAMS* pEventParams); }
extern "C" { TX_RESULT (__cdecl *txSetGazePointDataBehaviorParams)( TX_HANDLE hBehavior, const TX_GAZEPOINTDATAPARAMS* pParams); }
extern "C" { TX_RESULT (__cdecl *txGetGazePointDataBehaviorParams)( TX_CONSTHANDLE hBehavior, TX_GAZEPOINTDATAPARAMS* pParams); }
extern "C" { TX_RESULT (__cdecl *txGetGazePointDataEventParams)( TX_CONSTHANDLE hBehavior, TX_GAZEPOINTDATAEVENTPARAMS* pEventParams); }
extern "C" { TX_RESULT (__cdecl *txSetGazeAwareBehaviorParams)( TX_HANDLE hBehavior, const TX_GAZEAWAREPARAMS* pParams); }
extern "C" { TX_RESULT (__cdecl *txGetGazeAwareBehaviorParams)( TX_CONSTHANDLE hBehavior, TX_GAZEAWAREPARAMS* pParams); }
extern "C" { TX_RESULT (__cdecl *txGetGazeAwareBehaviorEventParams)( TX_CONSTHANDLE hBehavior, TX_GAZEAWAREEVENTPARAMS* pEventParams); }
extern "C" { TX_RESULT (__cdecl *txSetFixationDataBehaviorParams)( TX_HANDLE hBehavior, const TX_FIXATIONDATAPARAMS* pParams); }
extern "C" { TX_RESULT (__cdecl *txGetFixationDataBehaviorParams)( TX_CONSTHANDLE hBehavior, TX_FIXATIONDATAPARAMS* pParams); }
extern "C" { TX_RESULT (__cdecl *txGetFixationDataEventParams)( TX_CONSTHANDLE hBehavior, TX_FIXATIONDATAEVENTPARAMS* pEventParams); }
extern "C" { TX_RESULT (__cdecl *txGetEyePositionDataEventParams)( TX_CONSTHANDLE hBehavior, TX_EYEPOSITIONDATAEVENTPARAMS* pEventParams); }
extern "C" { TX_RESULT (__cdecl *txGetBehaviorEventTimestamp)( TX_CONSTHANDLE hBehavior, TX_REAL* pTimestamp); }
extern "C" { TX_RESULT (__cdecl *txGetStateAsync)( TX_CONTEXTHANDLE hContext, TX_CONSTSTRING statePath, TX_ASYNCDATACALLBACK completionHandler, TX_USERPARAM userParam); }
extern "C" { TX_RESULT (__cdecl *txGetState)( TX_CONTEXTHANDLE hContext, TX_CONSTSTRING statePath, TX_HANDLE* phStateBag); }
extern "C" { TX_RESULT (__cdecl *txSetStateAsync)( TX_HANDLE hStateBag, TX_ASYNCDATACALLBACK completionHandler, TX_USERPARAM userParam); }
extern "C" { TX_RESULT (__cdecl *txCreateStateBag)( TX_CONTEXTHANDLE hContext, TX_HANDLE* phStateBag, TX_CONSTSTRING statePath); }
extern "C" { TX_RESULT (__cdecl *txGetStateBagPath)( TX_CONSTHANDLE hStateBag, TX_STRING pStatePath, TX_SIZE* pStatePathSize); }
extern "C" { TX_RESULT (__cdecl *txRegisterStateObserver)( TX_CONTEXTHANDLE hContext, TX_CONSTSTRING statePath); }
extern "C" { TX_RESULT (__cdecl *txUnregisterStateObserver)( TX_CONTEXTHANDLE hContext, TX_CONSTSTRING statePath); }
extern "C" { TX_RESULT (__cdecl *txGetStateValueAsInteger)( TX_CONSTHANDLE hStateBag, TX_CONSTSTRING valuePath, TX_INTEGER* pIntValue); }
extern "C" { TX_RESULT (__cdecl *txGetStateValueAsReal)( TX_CONSTHANDLE hStateBag, TX_CONSTSTRING valuePath, TX_REAL* pRealValue); }
extern "C" { TX_RESULT (__cdecl *txGetStateValueAsString)( TX_CONSTHANDLE hStateBag, TX_CONSTSTRING valuePath, TX_STRING pStringValue, TX_SIZE* pStringSize); }
extern "C" { TX_RESULT (__cdecl *txGetStateValueAsRectangle)( TX_CONSTHANDLE hStateBag, TX_CONSTSTRING valuePath, TX_RECT* pRectValue); }
extern "C" { TX_RESULT (__cdecl *txGetStateValueAsVector2)( TX_CONSTHANDLE hStateBag, TX_CONSTSTRING valuePath, TX_VECTOR2* pVector2Value); }
extern "C" { TX_RESULT (__cdecl *txGetStateValueAsSize2)( TX_CONSTHANDLE hStateBag, TX_CONSTSTRING valuePath, TX_SIZE2* pSizeValue); }
extern "C" { TX_RESULT (__cdecl *txSetStateValueAsInteger)( TX_HANDLE hStateBag, TX_CONSTSTRING valuePath, TX_INTEGER intValue); }
extern "C" { TX_RESULT (__cdecl *txSetStateValueAsReal)( TX_HANDLE hStateBag, TX_CONSTSTRING valuePath, TX_REAL realValue); }
extern "C" { TX_RESULT (__cdecl *txSetStateValueAsString)( TX_HANDLE hStateBag, TX_CONSTSTRING valuePath, TX_CONSTSTRING stringValue); }
extern "C" { TX_RESULT (__cdecl *txSetStateValueAsRectangle)( TX_HANDLE hStateBag, TX_CONSTSTRING valuePath, const TX_RECT* pRectValue); }
extern "C" { TX_RESULT (__cdecl *txSetStateValueAsVector2)( TX_HANDLE hStateBag, TX_CONSTSTRING valuePath, const TX_VECTOR2* pVector2Value); }
extern "C" { TX_RESULT (__cdecl *txSetStateValueAsSize2)( TX_HANDLE hStateBag, TX_CONSTSTRING valuePath, const TX_SIZE2* pSizeValue); }
extern "C" { TX_RESULT (__cdecl *txGetPropertyForStateValue)( TX_CONSTHANDLE hStateBag, TX_PROPERTYHANDLE* phProperty, TX_CONSTSTRING valuePath, TX_BOOL createIfNotFound); }
extern "C" { TX_RESULT (__cdecl *txRegisterStateChangedHandler)( TX_CONTEXTHANDLE hContext, TX_TICKET* pTicket, TX_CONSTSTRING statePath, TX_ASYNCDATACALLBACK handler, TX_USERPARAM userParam); }
extern "C" { TX_RESULT (__cdecl *txUnregisterStateChangedHandler)( TX_CONTEXTHANDLE hContext, TX_TICKET ticket); }
extern "C" { TX_RESULT (__cdecl *txGetNotificationType)( TX_CONSTHANDLE hNotification, TX_NOTIFICATIONTYPE* pNotificationType); }
extern "C" { TX_RESULT (__cdecl *txGetNotificationData)( TX_CONSTHANDLE hNotification, TX_HANDLE* phObject); }
extern "C" { TX_RESULT (__cdecl *txGetQueryBounds)( TX_CONSTHANDLE hQuery, TX_HANDLE* phBounds); }
extern "C" { TX_RESULT (__cdecl *txGetQueryWindowIdCount)( TX_CONSTHANDLE hQuery, TX_SIZE* pWindowIdsCount); }
extern "C" { TX_RESULT (__cdecl *txGetQueryWindowId)( TX_CONSTHANDLE hQuery, TX_INTEGER windowIdIndex, TX_STRING pWindowId, TX_SIZE* pWindowIdSize); }
extern "C" { TX_RESULT (__cdecl *txGetEventInteractorId)( TX_CONSTHANDLE hEvent, TX_STRING pInteractorId, TX_SIZE* pInteractorIdSize); }
extern "C" { TX_RESULT (__cdecl *txGetEventBehavior)( TX_CONSTHANDLE hEvent, TX_HANDLE* phBehavior, TX_BEHAVIORTYPE behaviorType); }
extern "C" { TX_RESULT (__cdecl *txGetEventBehaviors)( TX_CONSTHANDLE hEvent, TX_HANDLE* phBehaviors, TX_SIZE* pBehaviorsSize); }


static const Dylib::Import imports[] =
{
  { "txInitializeEyeX", (void**)&txInitializeEyeX, Dylib::Import::cMangled },
  { "txUninitializeEyeX", (void**)&txUninitializeEyeX, Dylib::Import::cMangled },
  { "txIsEyeXInitialized", (void**)&txIsEyeXInitialized, Dylib::Import::cMangled },
  { "txWriteLogMessage", (void**)&txWriteLogMessage, Dylib::Import::cMangled },
  { "txSetInvalidArgumentHandler", (void**)&txSetInvalidArgumentHandler, Dylib::Import::cMangled },
  { "txEnableMonoCallbacks", (void**)&txEnableMonoCallbacks, Dylib::Import::cMangled },
  { "txGetEyeXAvailability", (void**)&txGetEyeXAvailability, Dylib::Import::cMangled },
  { "txCreateContext", (void**)&txCreateContext, Dylib::Import::cMangled },
  { "txReleaseContext", (void**)&txReleaseContext, Dylib::Import::cMangled },
  { "txShutdownContext", (void**)&txShutdownContext, Dylib::Import::cMangled },
  { "txSetContextName", (void**)&txSetContextName, Dylib::Import::cMangled },
  { "txSetContextParams", (void**)&txSetContextParams, Dylib::Import::cMangled },
  { "txGetContextName", (void**)&txGetContextName, Dylib::Import::cMangled },
  { "txGetTrackedObjects", (void**)&txGetTrackedObjects, Dylib::Import::cMangled },
  { "txEnableConnection", (void**)&txEnableConnection, Dylib::Import::cMangled },
  { "txDisableConnection", (void**)&txDisableConnection, Dylib::Import::cMangled },
  { "txGetConnectionState", (void**)&txGetConnectionState, Dylib::Import::cMangled },
  { "txRegisterConnectionStateChangedHandler", (void**)&txRegisterConnectionStateChangedHandler, Dylib::Import::cMangled },
  { "txUnregisterConnectionStateChangedHandler", (void**)&txUnregisterConnectionStateChangedHandler, Dylib::Import::cMangled },
  { "txRegisterMessageHandler", (void**)&txRegisterMessageHandler, Dylib::Import::cMangled },
  { "txUnregisterMessageHandler", (void**)&txUnregisterMessageHandler, Dylib::Import::cMangled },
  { "txRegisterQueryHandler", (void**)&txRegisterQueryHandler, Dylib::Import::cMangled },
  { "txUnregisterQueryHandler", (void**)&txUnregisterQueryHandler, Dylib::Import::cMangled },
  { "txRegisterEventHandler", (void**)&txRegisterEventHandler, Dylib::Import::cMangled },
  { "txUnregisterEventHandler", (void**)&txUnregisterEventHandler, Dylib::Import::cMangled },
  { "txPerformScheduledJobs", (void**)&txPerformScheduledJobs, Dylib::Import::cMangled },
  { "txGetContext", (void**)&txGetContext, Dylib::Import::cMangled },
  { "txGetObjectType", (void**)&txGetObjectType, Dylib::Import::cMangled },
  { "txGetObjectTypeName", (void**)&txGetObjectTypeName, Dylib::Import::cMangled },
  { "txReleaseObject", (void**)&txReleaseObject, Dylib::Import::cMangled },
  { "txFormatObjectAsText", (void**)&txFormatObjectAsText, Dylib::Import::cMangled },
  { "txGetAsyncDataResultCode", (void**)&txGetAsyncDataResultCode, Dylib::Import::cMangled },
  { "txGetAsyncDataContent", (void**)&txGetAsyncDataContent, Dylib::Import::cMangled },
  { "txCreateSnapshot", (void**)&txCreateSnapshot, Dylib::Import::cMangled },
  { "txCreateSnapshotWithQueryBounds", (void**)&txCreateSnapshotWithQueryBounds, Dylib::Import::cMangled },
  { "txCreateSnapshotForQuery", (void**)&txCreateSnapshotForQuery, Dylib::Import::cMangled },
  { "txCommitSnapshotAsync", (void**)&txCommitSnapshotAsync, Dylib::Import::cMangled },
  { "txGetSnapshotBounds", (void**)&txGetSnapshotBounds, Dylib::Import::cMangled },
  { "txGetSnapshotWindowIdCount", (void**)&txGetSnapshotWindowIdCount, Dylib::Import::cMangled },
  { "txGetSnapshotWindowId", (void**)&txGetSnapshotWindowId, Dylib::Import::cMangled },
  { "txAddSnapshotWindowId", (void**)&txAddSnapshotWindowId, Dylib::Import::cMangled },
  { "txCreateInteractor", (void**)&txCreateInteractor, Dylib::Import::cMangled },
  { "txCreateRectangularInteractor", (void**)&txCreateRectangularInteractor, Dylib::Import::cMangled },
  { "txRemoveInteractor", (void**)&txRemoveInteractor, Dylib::Import::cMangled },
  { "txGetInteractors", (void**)&txGetInteractors, Dylib::Import::cMangled },
  { "txCreateSnapshotBounds", (void**)&txCreateSnapshotBounds, Dylib::Import::cMangled },
  { "txDeleteSnapshotBounds", (void**)&txDeleteSnapshotBounds, Dylib::Import::cMangled },
  { "txCreateGlobalInteractorSnapshot", (void**)&txCreateGlobalInteractorSnapshot, Dylib::Import::cMangled },
  { "txGetBoundsType", (void**)&txGetBoundsType, Dylib::Import::cMangled },
  { "txSetRectangularBoundsData", (void**)&txSetRectangularBoundsData, Dylib::Import::cMangled },
  { "txSetRectangularBoundsDataRect", (void**)&txSetRectangularBoundsDataRect, Dylib::Import::cMangled },
  { "txGetRectangularBoundsData", (void**)&txGetRectangularBoundsData, Dylib::Import::cMangled },
  { "txGetRectangularBoundsDataRect", (void**)&txGetRectangularBoundsDataRect, Dylib::Import::cMangled },
  { "txBoundsIntersect", (void**)&txBoundsIntersect, Dylib::Import::cMangled },
  { "txBoundsIntersectRect", (void**)&txBoundsIntersectRect, Dylib::Import::cMangled },
  { "txGetInteractorId", (void**)&txGetInteractorId, Dylib::Import::cMangled },
  { "txGetInteractorParentId", (void**)&txGetInteractorParentId, Dylib::Import::cMangled },
  { "txGetInteractorWindowId", (void**)&txGetInteractorWindowId, Dylib::Import::cMangled },
  { "txSetInteractorZ", (void**)&txSetInteractorZ, Dylib::Import::cMangled },
  { "txGetInteractorZ", (void**)&txGetInteractorZ, Dylib::Import::cMangled },
  { "txSetInteractorEnabled", (void**)&txSetInteractorEnabled, Dylib::Import::cMangled },
  { "txGetInteractorEnabled", (void**)&txGetInteractorEnabled, Dylib::Import::cMangled },
  { "txSetInteractorDeleted", (void**)&txSetInteractorDeleted, Dylib::Import::cMangled },
  { "txGetInteractorDeleted", (void**)&txGetInteractorDeleted, Dylib::Import::cMangled },
  { "txCreateInteractorBounds", (void**)&txCreateInteractorBounds, Dylib::Import::cMangled },
  { "txDeleteInteractorBounds", (void**)&txDeleteInteractorBounds, Dylib::Import::cMangled },
  { "txGetInteractorBounds", (void**)&txGetInteractorBounds, Dylib::Import::cMangled },
  { "txCreateInteractorBehavior", (void**)&txCreateInteractorBehavior, Dylib::Import::cMangled },
  { "txRemoveInteractorBehavior", (void**)&txRemoveInteractorBehavior, Dylib::Import::cMangled },
  { "txGetInteractorBehavior", (void**)&txGetInteractorBehavior, Dylib::Import::cMangled },
  { "txGetInteractorBehaviors", (void**)&txGetInteractorBehaviors, Dylib::Import::cMangled },
  { "txCreateGazeAwareBehavior", (void**)&txCreateGazeAwareBehavior, Dylib::Import::cMangled },
  { "txCreateActivatableBehavior", (void**)&txCreateActivatableBehavior, Dylib::Import::cMangled },
  { "txCreatePannableBehavior", (void**)&txCreatePannableBehavior, Dylib::Import::cMangled },
  { "txCreateGazePointDataBehavior", (void**)&txCreateGazePointDataBehavior, Dylib::Import::cMangled },
  { "txCreateFixationDataBehavior", (void**)&txCreateFixationDataBehavior, Dylib::Import::cMangled },
  { "txCreateMask", (void**)&txCreateMask, Dylib::Import::cMangled },
  { "txRemoveMask", (void**)&txRemoveMask, Dylib::Import::cMangled },
  { "txGetMask", (void**)&txGetMask, Dylib::Import::cMangled },
  { "txGetMaskData", (void**)&txGetMaskData, Dylib::Import::cMangled },
  { "txSetMaskBounds", (void**)&txSetMaskBounds, Dylib::Import::cMangled },
  { "txClearMaskBounds", (void**)&txClearMaskBounds, Dylib::Import::cMangled },
  { "txGetMaskBounds", (void**)&txGetMaskBounds, Dylib::Import::cMangled },
  { "txCreateCommand", (void**)&txCreateCommand, Dylib::Import::cMangled },
  { "txGetCommandType", (void**)&txGetCommandType, Dylib::Import::cMangled },
  { "txSetCommandData", (void**)&txSetCommandData, Dylib::Import::cMangled },
  { "txGetCommandData", (void**)&txGetCommandData, Dylib::Import::cMangled },
  { "txExecuteCommandAsync", (void**)&txExecuteCommandAsync, Dylib::Import::cMangled },
  { "txCreateActionCommand", (void**)&txCreateActionCommand, Dylib::Import::cMangled },
  { "txDisableBuiltinKeys", (void**)&txDisableBuiltinKeys, Dylib::Import::cMangled },
  { "txEnableBuiltinKeys", (void**)&txEnableBuiltinKeys, Dylib::Import::cMangled },
  { "txLaunchConfigurationTool", (void**)&txLaunchConfigurationTool, Dylib::Import::cMangled },
  { "txSetCurrentProfile", (void**)&txSetCurrentProfile, Dylib::Import::cMangled },
  { "txDeleteProfile", (void**)&txDeleteProfile, Dylib::Import::cMangled },
  { "txGetBehaviorType", (void**)&txGetBehaviorType, Dylib::Import::cMangled },
  { "txSetActivatableBehaviorParams", (void**)&txSetActivatableBehaviorParams, Dylib::Import::cMangled },
  { "txGetActivatableBehaviorParams", (void**)&txGetActivatableBehaviorParams, Dylib::Import::cMangled },
  { "txGetActivatableEventType", (void**)&txGetActivatableEventType, Dylib::Import::cMangled },
  { "txGetActivationFocusChangedEventParams", (void**)&txGetActivationFocusChangedEventParams, Dylib::Import::cMangled },
  { "txSetPannableBehaviorParams", (void**)&txSetPannableBehaviorParams, Dylib::Import::cMangled },
  { "txGetPannableBehaviorParams", (void**)&txGetPannableBehaviorParams, Dylib::Import::cMangled },
  { "txGetPannableEventType", (void**)&txGetPannableEventType, Dylib::Import::cMangled },
  { "txGetPannablePanEventParams", (void**)&txGetPannablePanEventParams, Dylib::Import::cMangled },
  { "txGetPannableStepEventParams", (void**)&txGetPannableStepEventParams, Dylib::Import::cMangled },
  { "txGetPannableHandsFreeEventParams", (void**)&txGetPannableHandsFreeEventParams, Dylib::Import::cMangled },
  { "txSetGazePointDataBehaviorParams", (void**)&txSetGazePointDataBehaviorParams, Dylib::Import::cMangled },
  { "txGetGazePointDataBehaviorParams", (void**)&txGetGazePointDataBehaviorParams, Dylib::Import::cMangled },
  { "txGetGazePointDataEventParams", (void**)&txGetGazePointDataEventParams, Dylib::Import::cMangled },
  { "txSetGazeAwareBehaviorParams", (void**)&txSetGazeAwareBehaviorParams, Dylib::Import::cMangled },
  { "txGetGazeAwareBehaviorParams", (void**)&txGetGazeAwareBehaviorParams, Dylib::Import::cMangled },
  { "txGetGazeAwareBehaviorEventParams", (void**)&txGetGazeAwareBehaviorEventParams, Dylib::Import::cMangled },
  { "txSetFixationDataBehaviorParams", (void**)&txSetFixationDataBehaviorParams, Dylib::Import::cMangled },
  { "txGetFixationDataBehaviorParams", (void**)&txGetFixationDataBehaviorParams, Dylib::Import::cMangled },
  { "txGetFixationDataEventParams", (void**)&txGetFixationDataEventParams, Dylib::Import::cMangled },
  { "txGetEyePositionDataEventParams", (void**)&txGetEyePositionDataEventParams, Dylib::Import::cMangled },
  { "txGetBehaviorEventTimestamp", (void**)&txGetBehaviorEventTimestamp, Dylib::Import::cMangled },
  { "txGetStateAsync", (void**)&txGetStateAsync, Dylib::Import::cMangled },
  { "txGetState", (void**)&txGetState, Dylib::Import::cMangled },
  { "txSetStateAsync", (void**)&txSetStateAsync, Dylib::Import::cMangled },
  { "txCreateStateBag", (void**)&txCreateStateBag, Dylib::Import::cMangled },
  { "txGetStateBagPath", (void**)&txGetStateBagPath, Dylib::Import::cMangled },
  { "txRegisterStateObserver", (void**)&txRegisterStateObserver, Dylib::Import::cMangled },
  { "txUnregisterStateObserver", (void**)&txUnregisterStateObserver, Dylib::Import::cMangled },
  { "txGetStateValueAsInteger", (void**)&txGetStateValueAsInteger, Dylib::Import::cMangled },
  { "txGetStateValueAsReal", (void**)&txGetStateValueAsReal, Dylib::Import::cMangled },
  { "txGetStateValueAsString", (void**)&txGetStateValueAsString, Dylib::Import::cMangled },
  { "txGetStateValueAsRectangle", (void**)&txGetStateValueAsRectangle, Dylib::Import::cMangled },
  { "txGetStateValueAsVector2", (void**)&txGetStateValueAsVector2, Dylib::Import::cMangled },
  { "txGetStateValueAsSize2", (void**)&txGetStateValueAsSize2, Dylib::Import::cMangled },
  { "txSetStateValueAsInteger", (void**)&txSetStateValueAsInteger, Dylib::Import::cMangled },
  { "txSetStateValueAsReal", (void**)&txSetStateValueAsReal, Dylib::Import::cMangled },
  { "txSetStateValueAsString", (void**)&txSetStateValueAsString, Dylib::Import::cMangled },
  { "txSetStateValueAsRectangle", (void**)&txSetStateValueAsRectangle, Dylib::Import::cMangled },
  { "txSetStateValueAsVector2", (void**)&txSetStateValueAsVector2, Dylib::Import::cMangled },
  { "txSetStateValueAsSize2", (void**)&txSetStateValueAsSize2, Dylib::Import::cMangled },
  { "txGetPropertyForStateValue", (void**)&txGetPropertyForStateValue, Dylib::Import::cMangled },
  { "txRegisterStateChangedHandler", (void**)&txRegisterStateChangedHandler, Dylib::Import::cMangled },
  { "txUnregisterStateChangedHandler", (void**)&txUnregisterStateChangedHandler, Dylib::Import::cMangled },
  { "txGetNotificationType", (void**)&txGetNotificationType, Dylib::Import::cMangled },
  { "txGetNotificationData", (void**)&txGetNotificationData, Dylib::Import::cMangled },
  { "txGetQueryBounds", (void**)&txGetQueryBounds, Dylib::Import::cMangled },
  { "txGetQueryWindowIdCount", (void**)&txGetQueryWindowIdCount, Dylib::Import::cMangled },
  { "txGetQueryWindowId", (void**)&txGetQueryWindowId, Dylib::Import::cMangled },
  { "txGetEventInteractorId", (void**)&txGetEventInteractorId, Dylib::Import::cMangled },
  { "txGetEventBehavior", (void**)&txGetEventBehavior, Dylib::Import::cMangled },
  { "txGetEventBehaviors", (void**)&txGetEventBehaviors, Dylib::Import::cMangled },
  { 0, 0, 0 }
};

// Here you may specify a custom error message to be displayed when the library cannot be found.
static const char* notFoundMsg = "";
// Here you may specify an URL to some local or remote help resource.
static const char* notFoundURL = "";
RegisterDylibWithAliases( EyeX, "Tobii.EyeX.Client", imports, notFoundMsg, notFoundURL );
