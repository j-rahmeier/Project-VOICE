<!DOCTYPE html>
<html lang="en" dir="ltr">
<head>
<meta charset="UTF-8"/>
<title>User Reference:Expression Syntax - BCI2000 Help</title>
<link rel='shortcut icon' href='../../rsrc/favicon.ico' />
<style type='text/css'>
html { font-size:95%; font-family:arial,helvetica,sans-serif }
.printfooter { display:none }
#tocmain { font-size:81%; font-weight:bold; color:black; background-color:white; border:1px solid black; padding:1em; z-index:10; position:fixed; left:-1px; top:-1px; width:150px; }
#tocmain a { color:blue; text-decoration:none }
#tocmain ul { margin:0 0 0 0.4em; padding:0.1em 0 0 0.1em; list-style-position:outside; list-style-type:disc }
#tocmain li { text-indent:0; margin:0 0 0 1em; padding: 0 0 0 0 }
#tocmain p { margin:0; padding:0.1em 0 0 0.1em }
#tocmain .toc1 { margin-left:1.25em; }
#tocmain .toc2 { margin-left:2.25em; }
#tocmain .toc3 { margin-left:3.25em; }
#article { font-size:91%; position:absolute; left:200px; right:0; padding:1em; margin:0 }
</style>
</head>
<body>
 <div id='tocmain'>
 <a href='Main_Page.html'><img src='../../rsrc/bci2000logo.svg' alt='[Main Page]' /></a> <hr class="sep" /><p class="toc0"><a href="User_Tutorial%253ABCI2000_Tour.html">GettingStarted</a></p><ul></ul><p class="toc0"><a href="User_Reference%253AContents.html">User Manual</a></p><ul><li class="toc1"><a href="User_Reference%253AOperator_Module.html">Operator Module</a></li><li class="toc1"><a href="User_Reference%253AOperator_Module_Scripting.html">Operator Scripting</a></li><li class="toc1"><a href="User_Reference%253AModule_Command_Line_Options.html">Module Command Line Options</a></li><li class="toc1"><a href="User_Reference%253AData_File_Formats.html">Data File Formats</a></li><li class="toc1"><a href="User_Reference%253AFilters.html">Configuration Guide</a></li><li class="toc1"><a href="User_FAQ.html">FAQ</a></li><li class="toc1">Applications</li><ul><li class="toc2"><a href="User_Reference%253ACursorTask.html">Cursor Task</a></li><li class="toc2"><a href="https://www.bci2000.org/mediawiki/index.php/User_Reference:P3SpellerTask">P3Speller Task</a></li><li class="toc2"><a href="https://www.bci2000.org/mediawiki/index.php/User_Reference:StimulusPresentation">Stimulus Presentation</a></li></ul><li class="toc1">Tools</li><ul><li class="toc2"><a href="User_Reference%253ABCI2000Certification.html">BCI2000Certification</a></li><li class="toc2"><a href="User_Reference%253ABCI2000Launcher.html">BCI2000Launcher</a></li><li class="toc2"><a href="User_Reference%253ABCI2000Viewer.html">BCI2000Viewer</a></li><li class="toc2"><a href="User_Reference%253ABCI2000FileInfo.html">BCI2000FileInfo</a></li><li class="toc2"><a href="User_Reference%253ABCI2000Export.html">BCI2000Export</a></li><li class="toc2"><a href="User_Reference%253ABCI2000Analysis.html">BCI2000Analysis</a></li><li class="toc2"><a href="User_Reference%253ABCI2000_Offline_Analysis.html">BCI2000 Offline Analysis</a></li><li class="toc2"><a href="User_Reference%253AEloc_Helper.html">Eloc Helper</a></li><li class="toc2"><a href="User_Reference%253AEEGLabImport.html">EEGLabImport</a></li><li class="toc2"><a href="User_Reference%253AMatlab_Tools.html">Matlab Tools</a></li><li class="toc2"><a href="User_Reference%253AMatlab_MEX_Files.html">Matlab MEX Files</a></li><li class="toc2"><a href="User_Reference%253ACommand_Line_Processing.html">Command Line Processing</a></li></ul></ul><p class="toc0"><a href="Technical_Reference%253AContents.html">Technical Reference</a></p><ul></ul><p class="toc0"><a href="Programming_Reference%253AContents.html">Programming Manual</a></p><ul></ul><p class="toc0"><a href="Contributions%253AContents.html">Contributions</a></p><ul></ul><hr class="sep" /><p class="toc0"><a href="BCI2000_Glossary.html">BCI2000 Glossary</a></p> </div>
 <div id='article'>
 <h1 class = "pagetitle">Expression Syntax</h1>
 <p class = "subtitle">User Reference</p>
 <hr class = "sep" />
 <div id="mw-content-text" lang="en" dir="ltr" class="mw-content-ltr"><div class="mw-parser-output"><p>BCI2000 contains an <i>expression parser</i> that evaluates user-defined arithmetic expressions at run-time.
Expression syntax tries to be intuitive and is based on C and Matlab notation.
</p>
<div id="toc" class="toc" role="navigation" aria-labelledby="mw-toc-heading"><input type="checkbox" role="button" id="toctogglecheckbox" class="toctogglecheckbox" style="display:none" /><div class="toctitle" lang="en" dir="ltr"><h2 id="mw-toc-heading">Contents</h2><span class="toctogglespan"><label class="toctogglelabel" for="toctogglecheckbox"></label></span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="User_Reference%253AExpression_Syntax.html#Syntax"><span class="tocnumber">1</span> <span class="toctext">Syntax</span></a>
<ul>
<li class="toclevel-2 tocsection-2"><a href="User_Reference%253AExpression_Syntax.html#Empty_Expression"><span class="tocnumber">1.1</span> <span class="toctext">Empty Expression</span></a></li>
<li class="toclevel-2 tocsection-3"><a href="User_Reference%253AExpression_Syntax.html#.22Real.22_Numbers"><span class="tocnumber">1.2</span> <span class="toctext">"Real" Numbers</span></a></li>
<li class="toclevel-2 tocsection-4"><a href="User_Reference%253AExpression_Syntax.html#Operators"><span class="tocnumber">1.3</span> <span class="toctext">Operators</span></a></li>
<li class="toclevel-2 tocsection-5"><a href="User_Reference%253AExpression_Syntax.html#Built-in_Functions"><span class="tocnumber">1.4</span> <span class="toctext">Built-in Functions</span></a></li>
<li class="toclevel-2 tocsection-6"><a href="User_Reference%253AExpression_Syntax.html#Variables"><span class="tocnumber">1.5</span> <span class="toctext">Variables</span></a></li>
<li class="toclevel-2 tocsection-7"><a href="User_Reference%253AExpression_Syntax.html#States"><span class="tocnumber">1.6</span> <span class="toctext">States</span></a></li>
<li class="toclevel-2 tocsection-8"><a href="User_Reference%253AExpression_Syntax.html#Signal_Values"><span class="tocnumber">1.7</span> <span class="toctext">Signal Values</span></a></li>
<li class="toclevel-2 tocsection-9"><a href="User_Reference%253AExpression_Syntax.html#Semicolon"><span class="tocnumber">1.8</span> <span class="toctext">Semicolon</span></a></li>
<li class="toclevel-2 tocsection-10"><a href="User_Reference%253AExpression_Syntax.html#Comments"><span class="tocnumber">1.9</span> <span class="toctext">Comments</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-11"><a href="User_Reference%253AExpression_Syntax.html#Examples"><span class="tocnumber">2</span> <span class="toctext">Examples</span></a></li>
<li class="toclevel-1 tocsection-12"><a href="User_Reference%253AExpression_Syntax.html#Caveats"><span class="tocnumber">3</span> <span class="toctext">Caveats</span></a></li>
</ul>
</div>

<h3><span class="mw-headline" id="Syntax">Syntax</span></h3>
<h4><span class="mw-headline" id="Empty_Expression">Empty Expression</span></h4>
<p>The empty expression is a valid expression, and evaluates to 0.
</p>
<h4><span id="&quot;Real&quot;_Numbers"></span><span class="mw-headline" id=".22Real.22_Numbers">"Real" Numbers</span></h4>
<p>Numbers may be given as literals in decimal or scientific notation:
100, 1e2, 100.0, (1000/10)
all refer to the same number. Complex numbers are not supported.
</p>
<h4><span class="mw-headline" id="Operators">Operators</span></h4>
<dl><dt>Arithmetic operators</dt>
<dd></dd>
<dd><pre> ^ unary- * / + -</pre></dd>
<dd>Unlike C but consistent with Matlab, <code>a^b</code> evaluates to the b-th power of a.</dd></dl>
<dl><dt>Comparison operators</dt>
<dd></dd>
<dd><pre> &lt; &gt; &lt;= &gt;= ==&#160;!= ~=</pre></dd>
<dd>Note that a single equals sign is not a valid operator. For the "not equal" operator, the C version (!=) is supported along with the Matlab version (~=).</dd></dl>
<dl><dt>Logical operators</dt>
<dd></dd>
<dd><pre>&#160;! ~ &amp;&amp; ||</pre></dd>
<dd>Again,&#160;! and ~ are synonymous to match both C and Matlab conventions. When mixing boolean and numerical expressions, values need to be converted back and forth between numbers and logical values. As usual, zero is treated as <i>false</i>, and nonzero values are treated as <i>true</i>. Reversely, <i>false</i> is converted into the number 0, and <i>true</i> is converted into 1. There are no literals for <i>true</i> and <i>false</i>; use 0 and 1 instead.</dd></dl>
<dl><dt>Condition operator</dt>
<dd><pre> &lt;condition&gt;?&lt;if-expr&gt;:&lt;else-expr&gt;</pre></dd>
<dd>As in C, the ternary condition operator&#160;?: allows for if-then-else-like constructs. If <i>condition</i> is true, the condition operator evaluates to the value of <i>if-expr</i>, and to the value of <i>else-expr</i> otherwise.</dd></dl>
<dl><dt>Precedence</dt>
<dd>Operator precedence follows the order of appearance in the above list. As usual, parentheses ( ) may be used to override operator precedence.</dd></dl>
<h4><span class="mw-headline" id="Built-in_Functions">Built-in Functions</span></h4>
<p>By default, expressions know a number of mathematical functions by name. These are:
</p>
<dl><dd>sqrt</dd>
<dd>fabs, abs (alias to fabs)</dd>
<dd>fmod, mod (alias to fmod)</dd>
<dd>floor, ceil</dd>
<dd>exp, log, log10</dd>
<dd>pow</dd>
<dd>sin, cos, tan</dd>
<dd>asin, acos, atan, atan2</dd>
<dd>sinh, cosh, tanh</dd></dl>
<p>Arguments and behavior of those functions agree with their implementations in the standard C library.
In addition, the following functions are provided which are not present the standard C library:
</p>
<dl><dd><tt>bits(value, position, count)</tt> converts <tt>value</tt> to a 64 bit unsigned integer, and extracts <tt>count</tt> bits starting at bit <tt>position</tt>. Bits are counted from least to most significant, starting at zero. The result is a number between zero and 2^<tt>count</tt>-1.</dd>
<dd><tt>bit(value, position)</tt> computes the result of <tt>bits(value, position, 1)</tt> in a slightly more efficient way.</dd></dl>
<p>By deriving from the <tt>Expression</tt> class, a programmer may support additional functions from his own code.
</p>
<h4><span class="mw-headline" id="Variables">Variables</span></h4>
<p>Expressions support the creation of variables, and may contain statements that perform assignment, as in
</p>
<pre>MyVariable:=MyOtherVariable+10;</pre>
<p>On the right hand side of the assignment, only existing variables may occur. On the left side, when a non-existing variable is referenced, it is created.
</p><p>The scope of variables depends on the expression's evaluation context. When calling <tt>Expression::Evaluate()</tt>, a pointer to an <tt>Expression::VariableContainer</tt> may be specified by the programmer. When no such container is specified, variables cannot be used. When the container is cleared each time before an expression is evaluated, variables are local to the expression. When the same container is specified across expression evaluation, variables keep their values across multiple evaluations. When the same container is specified when evaluating multiple expressions, variables and values are shared amongst these expressions.
</p>
<h4><span class="mw-headline" id="States">States</span></h4>
<p>Expressions may involve <a href="BCI2000_Glossary.html#State" title="BCI2000 Glossary">state variables</a>. These are referred to by name as in
</p>
<pre>TargetCode==ResultCode</pre>
<p>or
</p>
<pre>(TargetCode-1)*ResultCode</pre>
<p>When a variable exists with the same name as a state, the state takes precedence. To address states unambiguously, use
</p>
<pre>State(TargetCode)==State(ResultCode)</pre>
<p>When assigning to state variables, always use
</p>
<pre>State(ResultCode):=3</pre>
<p>By default, the contents of a state variable are interpreted as unsigned integers.
To interpret the value of a state as a floating-point value, write
</p>
<pre>MyState.AsFloat()</pre>
<p>A signed integer is returned by
</p>
<pre>MyState.AsSigned()</pre>
<p>For clarity, you may also use
</p>
<pre>MyState.AsUnsigned()</pre>
<p>but it will have no effect, as unsigned is the default.
</p>
<h4><span class="mw-headline" id="Signal_Values">Signal Values</span></h4>
<p>Depending on context, expressions may involve signal values:
</p>
<pre>10*Signal(1,3)</pre>
<p>Here, "Signal" refers to a filter's input signal.
Consistently with configuration parameters (e.g., indices specified inside the <a href="User_Reference%253ALinearClassifier.html" title="User Reference:LinearClassifier">LinearClassifier</a> matrix), indices are <i>one-based</i>.
Similarly, labels and physical units may be used when defined for the signal in question, e.g.
</p>
<pre>Signal( "CPz", 10ms )</pre>
<p>will address a channel labeled "CPz", and a physical sample position 10ms from the epoch begin when defined for the signal in question.
(Note: In previous versions of BCI2000 (previous to the Apr 2008 build, up to source revision 1914), expressions used <i>zero-based</i> indices; you may have to update your configuration accordingly when using expressions that involve signals.)
</p>
<h4><span class="mw-headline" id="Semicolon">Semicolon</span></h4>
<p>The semicolon may be used to concatenate multiple statements and expressions into a single expression. The expression will then evaluate to the value of the last statement or expression. Examples:
The expression "4;5" evaluates to 5; the expression "x:=4; y:=3;" evaluates to 3; the expression ";" evaluates to 0; the expression "1;" evaluates to 1.
</p>
<h4><span class="mw-headline" id="Comments">Comments</span></h4>
<p>Expressions support C++-style comments. Beginning with two slashes, a comment extends to the end of a line:
</p>
<pre>Result:=PreviousTargetCode-State(TargetCode); // Compute the return value
PreviousTargetCode:=State(TargetCode); // Store the target code
Result; // Return the result</pre>
<h3><span class="mw-headline" id="Examples">Examples</span></h3>
<ul><li>An expression that evaluates to the ResultCode state only if that equals the TargetCode state (i.e., in case of a successful trial):</li></ul>
<pre>(ResultCode==TargetCode)?ResultCode:0
</pre>
<ul><li>A mapping of TargetCode values to arbitrary numbers:</li></ul>
<pre>(TargetCode==0)?3:((TargetCode==1)?-4:((TargetCode==2)?18:0))
</pre>
<h3><span class="mw-headline" id="Caveats">Caveats</span></h3>
<ul><li>There is no integer arithmetic. All evaluation is done in floating point, even if only integers are involved. As a result, comparisons may fail unexpectedly, or boolean conversion may always yield true:</li></ul>
<dl><dd><pre> x^2-(3/7+4/5)*x+(4/5)*(3/7)==(x-4/5)*(x-3/7)</pre></dd>
<dd>should be <i>true</i> independently of x but will always evaluate to <i>false</i> due to roundoff errors.</dd>
<dd>In most cases, a numerically robust reformulation of the expression should resolve the problem.</dd></dl>
<ul><li>Sometimes, operator precedence or behavior may not match your intuition. When in doubt, use brackets:</li></ul>
<dl><dd><pre>(TargetCode^(-3))/5</pre></dd>
<dd>rather than</dd>
<dd><pre>TargetCode^-3/5</pre></dd>
<dd>which is equivalent to the previous line but may be misunderstood as</dd>
<dd><pre>TargetCode^(-3/5)</pre></dd></dl>
<!-- 
NewPP limit report
Cached time: 20230524175621
Cache expiry: 86400
Dynamic content: false
Complications: []
CPU time usage: 0.018 seconds
Real time usage: 0.022 seconds
Preprocessor visited node count: 125/1000000
Post‐expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 2/40
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 805/5000000 bytes
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%    0.000      1 -total
-->

<!-- Saved in parser cache with key wikidb-bci_:pcache:idhash:1459-0!canonical and timestamp 20230524175621 and revision id 10021
 -->
</div></div><div class="printfooter">
Retrieved from "<a dir="ltr" href="http://www.bci2000.org/mediawiki/index.php?title=User_Reference:Expression_Syntax&amp;oldid=10021">http://www.bci2000.org/mediawiki/index.php?title=User_Reference:Expression_Syntax&amp;oldid=10021</a>"</div>
 </div>
</body>
</html>